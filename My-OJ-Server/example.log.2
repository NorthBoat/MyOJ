DEBUG http-nio-8089-exec-5 druid.sql.ResultSet - {conn-10001, pstmt-20014, rs-50014} Result: [2, 简化路径, 中, 0, 12, simplifyPath, Stack&Queue, String simplifyPath(String path)]
DEBUG http-nio-8089-exec-5 druid.sql.ResultSet - {conn-10001, pstmt-20014, rs-50014} Result: [3, 链表的头插法, 易, 0, 21, insertByHead, List, Node insertByHead(int[] nums)]
DEBUG http-nio-8089-exec-5 druid.sql.ResultSet - {conn-10001, pstmt-20014, rs-50014} closed
DEBUG http-nio-8089-exec-5 druid.sql.Statement - {conn-10001, pstmt-20014} closed
DEBUG http-nio-8089-exec-5 druid.sql.Connection - {conn-10001} pool-recycle
DEBUG http-nio-8089-exec-8 druid.sql.Connection - {conn-10001} pool-connect
DEBUG http-nio-8089-exec-8 druid.sql.Statement - {conn-10001, pstmt-20015} created. select * from `detail` where `num`=?
DEBUG http-nio-8089-exec-8 druid.sql.Statement - {conn-10001, pstmt-20015} Parameters : [3]
DEBUG http-nio-8089-exec-8 druid.sql.Statement - {conn-10001, pstmt-20015} Types : [INTEGER]
DEBUG http-nio-8089-exec-7 druid.sql.Connection - {conn-10002} pool-connect
DEBUG http-nio-8089-exec-7 druid.sql.Statement - {conn-10002, pstmt-20016} created. select * from `question` where num=?
DEBUG http-nio-8089-exec-7 druid.sql.Statement - {conn-10002, pstmt-20016} Parameters : [3]
DEBUG http-nio-8089-exec-7 druid.sql.Statement - {conn-10002, pstmt-20016} Types : [INTEGER]
DEBUG http-nio-8089-exec-8 druid.sql.Statement - {conn-10001, pstmt-20015} executed. 41.198601 millis. select * from `detail` where `num`=?
DEBUG http-nio-8089-exec-8 druid.sql.ResultSet - {conn-10001, pstmt-20015, rs-50015} open
DEBUG http-nio-8089-exec-8 druid.sql.ResultSet - {conn-10001, pstmt-20015, rs-50015} Header: [num, title, desc, memory_limit, time_limit, example_input, example_output, tips, customized]
DEBUG http-nio-8089-exec-8 druid.sql.ResultSet - {conn-10001, pstmt-20015, rs-50015} Result: [3, 链表的头插法, 给你一个节点结构Node，请实现链表的头插法，要求给你一个数组，利用头插法构造链表并返回表头, 0, 0, [1,2,3,4,5,6,7,8,9], 9->8->7->6->5->4->3->2->1, 基础链表, 0]
DEBUG http-nio-8089-exec-8 druid.sql.ResultSet - {conn-10001, pstmt-20015, rs-50015} closed
DEBUG http-nio-8089-exec-8 druid.sql.Statement - {conn-10001, pstmt-20015} closed
DEBUG http-nio-8089-exec-8 druid.sql.Connection - {conn-10001} pool-recycle
DEBUG http-nio-8089-exec-7 druid.sql.Statement - {conn-10002, pstmt-20016} executed. 43.709601 millis. select * from `question` where num=?
DEBUG http-nio-8089-exec-7 druid.sql.ResultSet - {conn-10002, pstmt-20016, rs-50016} open
DEBUG http-nio-8089-exec-7 druid.sql.ResultSet - {conn-10002, pstmt-20016, rs-50016} Header: [num, title, level, thumb, example, name, tag, func]
DEBUG http-nio-8089-exec-7 druid.sql.ResultSet - {conn-10002, pstmt-20016, rs-50016} Result: [3, 链表的头插法, 易, 0, 21, insertByHead, List, Node insertByHead(int[] nums)]
DEBUG http-nio-8089-exec-7 druid.sql.ResultSet - {conn-10002, pstmt-20016, rs-50016} closed
DEBUG http-nio-8089-exec-7 druid.sql.Statement - {conn-10002, pstmt-20016} closed
DEBUG http-nio-8089-exec-7 druid.sql.Connection - {conn-10002} pool-recycle
DEBUG http-nio-8089-exec-9 druid.sql.Connection - {conn-10002} pool-connect
DEBUG http-nio-8089-exec-9 druid.sql.Statement - {conn-10002, pstmt-20017} created. select * from `info` where `account`=?
DEBUG http-nio-8089-exec-9 druid.sql.Statement - {conn-10002, pstmt-20017} Parameters : [1543625674@qq.com]
DEBUG http-nio-8089-exec-9 druid.sql.Statement - {conn-10002, pstmt-20017} Types : [VARCHAR]
DEBUG http-nio-8089-exec-9 druid.sql.Statement - {conn-10002, pstmt-20017} executed. 79.776001 millis. select * from `info` where `account`=?
DEBUG http-nio-8089-exec-9 druid.sql.ResultSet - {conn-10002, pstmt-20017, rs-50017} open
DEBUG http-nio-8089-exec-9 druid.sql.ResultSet - {conn-10002, pstmt-20017, rs-50017} Header: [account, name, finished, simple_finished, middle_finished, hard_finished, finished_index, register_time, grade, skillful_lang, java_finished, c_finished, python_finished]
DEBUG http-nio-8089-exec-9 druid.sql.ResultSet - {conn-10002, pstmt-20017, rs-50017} Result: [1543625674@qq.com, NorthBoat, 2, 0, 0, 0, 101, 2022-04-05 06:05:05.0, null, Java, 2, 0, 0]
DEBUG http-nio-8089-exec-9 druid.sql.ResultSet - {conn-10002, pstmt-20017, rs-50017} closed
DEBUG http-nio-8089-exec-9 druid.sql.Statement - {conn-10002, pstmt-20017} closed
DEBUG http-nio-8089-exec-9 druid.sql.Connection - {conn-10002} pool-recycle
DEBUG http-nio-8089-exec-9 druid.sql.Connection - {conn-10002} pool-connect
DEBUG http-nio-8089-exec-9 druid.sql.Statement - {conn-10002, pstmt-20018} created. update `info` set finished=?, java_finished=?, c_finished=?, python_finished=?, finished_index=?, skillful_lang=? where `account`=?
DEBUG http-nio-8089-exec-9 druid.sql.Statement - {conn-10002, pstmt-20018} Parameters : [2, 2, 0, 0, 101, Java, 1543625674@qq.com]
DEBUG http-nio-8089-exec-9 druid.sql.Statement - {conn-10002, pstmt-20018} Types : [INTEGER, INTEGER, INTEGER, INTEGER, VARCHAR, VARCHAR, VARCHAR]
DEBUG http-nio-8089-exec-9 druid.sql.Statement - {conn-10002, pstmt-20018} executed. 85.5371 millis. update `info` set finished=?, java_finished=?, c_finished=?, python_finished=?, finished_index=?, skillful_lang=? where `account`=?
DEBUG http-nio-8089-exec-9 druid.sql.Statement - {conn-10002, pstmt-20018} closed
DEBUG http-nio-8089-exec-9 druid.sql.Connection - {conn-10002} pool-recycle
DEBUG http-nio-8089-exec-10 druid.sql.Connection - {conn-10002} pool-connect
DEBUG http-nio-8089-exec-10 druid.sql.Statement - {conn-10002, pstmt-20019} created. select * from `result` where `account` = ? and `num` = ?
DEBUG http-nio-8089-exec-10 druid.sql.Statement - {conn-10002, pstmt-20019} Parameters : [1543625674@qq.com, 3]
DEBUG http-nio-8089-exec-10 druid.sql.Statement - {conn-10002, pstmt-20019} Types : [VARCHAR, INTEGER]
DEBUG http-nio-8089-exec-10 druid.sql.Statement - {conn-10002, pstmt-20019} executed. 43.7188 millis. select * from `result` where `account` = ? and `num` = ?
DEBUG http-nio-8089-exec-10 druid.sql.ResultSet - {conn-10002, pstmt-20019, rs-50018} open
DEBUG http-nio-8089-exec-10 druid.sql.ResultSet - {conn-10002, pstmt-20019, rs-50018} Header: [account, num, title, key1, key2, key3, key4, val1, val2, val3, val4, code]
DEBUG http-nio-8089-exec-10 druid.sql.ResultSet - {conn-10002, pstmt-20019, rs-50018} Result: [1543625674@qq.com, 3, 编译失败 QAQ, 通过样例:, 错误信息:, 容器创建时间:, 容器销毁时间:, 0, 6: error: missing return statement
	}
	^
1 error
, 2062, 881ms, class Solution{<br>&nbsp;&nbsp;&nbsp;&nbsp;public Node insertByHead(int[] nums){<br><br>&nbsp;&nbsp;&nbsp;&nbsp;}<br>}]
DEBUG http-nio-8089-exec-10 druid.sql.ResultSet - {conn-10002, pstmt-20019, rs-50018} closed
DEBUG http-nio-8089-exec-10 druid.sql.Statement - {conn-10002, pstmt-20019} closed
DEBUG http-nio-8089-exec-10 druid.sql.Connection - {conn-10002} pool-recycle
DEBUG http-nio-8089-exec-10 druid.sql.Connection - {conn-10002} pool-connect
DEBUG http-nio-8089-exec-10 druid.sql.Statement - {conn-10002, pstmt-20020} created. update `result` set `title`=?, `key1`=?, `key2`=?, `key3`=?, `key4`=?, `val1`=?, `val2`=?, `val3`=?, `val4`=?, `code`=? where `account`=? and `num`=?
DEBUG http-nio-8089-exec-10 druid.sql.Statement - {conn-10002, pstmt-20020} Parameters : [编译失败 QAQ, 通过样例:, 错误信息:, 容器创建时间:, 容器销毁时间:, 0, 17: error: missing return statement
	}
	^
1 error
, 3224, 1024ms, /*你所用到的节点数据结构<br>class Node{<br>&nbsp;&nbsp;&nbsp;&nbsp;int val;<br>&nbsp;&nbsp;&nbsp;&nbsp;Node next;<br>&nbsp;&nbsp;&nbsp;&nbsp;public Node(){}<br>&nbsp;&nbsp;&nbsp;&nbsp;public Node(int val){ this.val = val; }<br>&nbsp;&nbsp;&nbsp;&nbsp;public Node(int val, Node next){ this.val = val; this.next = next; }<br>}<br>*/<br><br><br>class Solution{<br>&nbsp;&nbsp;&nbsp;&nbsp;public Node insertByHead(int[] nums){<br><br>&nbsp;&nbsp;&nbsp;&nbsp;}<br>}, 1543625674@qq.com, 3]
DEBUG http-nio-8089-exec-10 druid.sql.Statement - {conn-10002, pstmt-20020} Types : [VARCHAR, VARCHAR, VARCHAR, VARCHAR, VARCHAR, VARCHAR, VARCHAR, VARCHAR, VARCHAR, VARCHAR, VARCHAR, INTEGER]
DEBUG http-nio-8089-exec-10 druid.sql.Statement - {conn-10002, pstmt-20020} executed. 83.341999 millis. update `result` set `title`=?, `key1`=?, `key2`=?, `key3`=?, `key4`=?, `val1`=?, `val2`=?, `val3`=?, `val4`=?, `code`=? where `account`=? and `num`=?
DEBUG http-nio-8089-exec-10 druid.sql.Statement - {conn-10002, pstmt-20020} closed
DEBUG http-nio-8089-exec-10 druid.sql.Connection - {conn-10002} pool-recycle
DEBUG http-nio-8089-exec-6 druid.sql.Connection - {conn-10002} pool-connect
DEBUG http-nio-8089-exec-6 druid.sql.Statement - {conn-10002, pstmt-20021} created. select * from `result` where `account` = ? and `num` = ?
DEBUG http-nio-8089-exec-6 druid.sql.Statement - {conn-10002, pstmt-20021} Parameters : [1543625674@qq.com, 3]
DEBUG http-nio-8089-exec-6 druid.sql.Statement - {conn-10002, pstmt-20021} Types : [VARCHAR, INTEGER]
DEBUG http-nio-8089-exec-6 druid.sql.Statement - {conn-10002, pstmt-20021} executed. 41.6482 millis. select * from `result` where `account` = ? and `num` = ?
DEBUG http-nio-8089-exec-6 druid.sql.ResultSet - {conn-10002, pstmt-20021, rs-50019} open
DEBUG http-nio-8089-exec-6 druid.sql.ResultSet - {conn-10002, pstmt-20021, rs-50019} Header: [account, num, title, key1, key2, key3, key4, val1, val2, val3, val4, code]
DEBUG http-nio-8089-exec-6 druid.sql.ResultSet - {conn-10002, pstmt-20021, rs-50019} Result: [1543625674@qq.com, 3, 编译失败 QAQ, 通过样例:, 错误信息:, 容器创建时间:, 容器销毁时间:, 0, 17: error: missing return statement
	}
	^
1 error
, 3224, 1024ms, /*你所用到的节点数据结构<br>class Node{<br>&nbsp;&nbsp;&nbsp;&nbsp;int val;<br>&nbsp;&nbsp;&nbsp;&nbsp;Node next;<br>&nbsp;&nbsp;&nbsp;&nbsp;public Node(){}<br>&nbsp;&nbsp;&nbsp;&nbsp;public Node(int val){ this.val = val; }<br>&nbsp;&nbsp;&nbsp;&nbsp;public Node(int val, Node next){ this.val = val; this.next = next; }<br>}<br>*/<br><br><br>class Solution{<br>&nbsp;&nbsp;&nbsp;&nbsp;public Node insertByHead(int[] nums){<br><br>&nbsp;&nbsp;&nbsp;&nbsp;}<br>}]
DEBUG http-nio-8089-exec-6 druid.sql.ResultSet - {conn-10002, pstmt-20021, rs-50019} closed
DEBUG http-nio-8089-exec-6 druid.sql.Statement - {conn-10002, pstmt-20021} closed
DEBUG http-nio-8089-exec-6 druid.sql.Connection - {conn-10002} pool-recycle
DEBUG http-nio-8089-exec-6 druid.sql.Connection - {conn-10002} pool-connect
DEBUG http-nio-8089-exec-6 druid.sql.Statement - {conn-10002, pstmt-20022} created. update `result` set `title`=?, `key1`=?, `key2`=?, `key3`=?, `key4`=?, `val1`=?, `val2`=?, `val3`=?, `val4`=?, `code`=? where `account`=? and `num`=?
DEBUG http-nio-8089-exec-6 druid.sql.Statement - {conn-10002, pstmt-20022} Parameters : [编译失败 QAQ, 通过样例:, 错误信息:, 容器创建时间:, 容器销毁时间:, 0, 17: error: missing return statement
	}
	^
1 error
, 3224, 1024ms, /*你所用到的节点数据结构<br>class Node{<br>&nbsp;&nbsp;&nbsp;&nbsp;int val;<br>&nbsp;&nbsp;&nbsp;&nbsp;Node next;<br>&nbsp;&nbsp;&nbsp;&nbsp;public Node(){}<br>&nbsp;&nbsp;&nbsp;&nbsp;public Node(int val){ this.val = val; }<br>&nbsp;&nbsp;&nbsp;&nbsp;public Node(int val, Node next){ this.val = val; this.next = next; }<br>}<br>*/<br><br><br>class Solution{<br>&nbsp;&nbsp;&nbsp;&nbsp;public Node insertByHead(int[] nums){<br><br>&nbsp;&nbsp;&nbsp;&nbsp;}<br>}, 1543625674@qq.com, 3]
DEBUG http-nio-8089-exec-6 druid.sql.Statement - {conn-10002, pstmt-20022} Types : [VARCHAR, VARCHAR, VARCHAR, VARCHAR, VARCHAR, VARCHAR, VARCHAR, VARCHAR, VARCHAR, VARCHAR, VARCHAR, INTEGER]
DEBUG http-nio-8089-exec-6 druid.sql.Statement - {conn-10002, pstmt-20022} executed. 86.266901 millis. update `result` set `title`=?, `key1`=?, `key2`=?, `key3`=?, `key4`=?, `val1`=?, `val2`=?, `val3`=?, `val4`=?, `code`=? where `account`=? and `num`=?
DEBUG http-nio-8089-exec-6 druid.sql.Statement - {conn-10002, pstmt-20022} closed
DEBUG http-nio-8089-exec-6 druid.sql.Connection - {conn-10002} pool-recycle
DEBUG http-nio-8089-exec-1 druid.sql.Connection - {conn-10002} pool-connect
DEBUG http-nio-8089-exec-1 druid.sql.Statement - {conn-10002, pstmt-20023} created. select * from `question` where num=?
DEBUG http-nio-8089-exec-1 druid.sql.Statement - {conn-10002, pstmt-20023} Parameters : [3]
DEBUG http-nio-8089-exec-1 druid.sql.Statement - {conn-10002, pstmt-20023} Types : [INTEGER]
DEBUG http-nio-8089-exec-1 druid.sql.Statement - {conn-10002, pstmt-20023} executed. 41.0302 millis. select * from `question` where num=?
DEBUG http-nio-8089-exec-1 druid.sql.ResultSet - {conn-10002, pstmt-20023, rs-50020} open
DEBUG http-nio-8089-exec-1 druid.sql.ResultSet - {conn-10002, pstmt-20023, rs-50020} Header: [num, title, level, thumb, example, name, tag, func]
DEBUG http-nio-8089-exec-1 druid.sql.ResultSet - {conn-10002, pstmt-20023, rs-50020} Result: [3, 链表的头插法, 易, 0, 21, insertByHead, List, Node insertByHead(int[] nums)]
DEBUG http-nio-8089-exec-1 druid.sql.ResultSet - {conn-10002, pstmt-20023, rs-50020} closed
DEBUG http-nio-8089-exec-1 druid.sql.Statement - {conn-10002, pstmt-20023} closed
DEBUG http-nio-8089-exec-1 druid.sql.Connection - {conn-10002} pool-recycle
DEBUG http-nio-8089-exec-2 druid.sql.Connection - {conn-10002} pool-connect
DEBUG http-nio-8089-exec-2 druid.sql.Statement - {conn-10002, pstmt-20024} created. select * from `question`
DEBUG http-nio-8089-exec-2 druid.sql.Statement - {conn-10002, pstmt-20024} Parameters : []
DEBUG http-nio-8089-exec-2 druid.sql.Statement - {conn-10002, pstmt-20024} Types : []
DEBUG http-nio-8089-exec-2 druid.sql.Statement - {conn-10002, pstmt-20024} executed. 42.213601 millis. select * from `question`
DEBUG http-nio-8089-exec-2 druid.sql.ResultSet - {conn-10002, pstmt-20024, rs-50021} open
DEBUG http-nio-8089-exec-2 druid.sql.ResultSet - {conn-10002, pstmt-20024, rs-50021} Header: [num, title, level, thumb, example, name, tag, func]
DEBUG http-nio-8089-exec-2 druid.sql.ResultSet - {conn-10002, pstmt-20024, rs-50021} Result: [0, 翻转整数, 易, 0, 21, reverseNum, Stack&Queue, int reverseNum(int num)]
DEBUG http-nio-8089-exec-2 druid.sql.ResultSet - {conn-10002, pstmt-20024, rs-50021} Result: [1, 有效的括号, 易, 0, 17, validBrackets, Stack&Queue, boolean validBrackets(String brackets)]
DEBUG http-nio-8089-exec-2 druid.sql.ResultSet - {conn-10002, pstmt-20024, rs-50021} Result: [2, 简化路径, 中, 0, 12, simplifyPath, Stack&Queue, String simplifyPath(String path)]
DEBUG http-nio-8089-exec-2 druid.sql.ResultSet - {conn-10002, pstmt-20024, rs-50021} Result: [3, 链表的头插法, 易, 0, 21, insertByHead, List, Node insertByHead(int[] nums)]
DEBUG http-nio-8089-exec-2 druid.sql.ResultSet - {conn-10002, pstmt-20024, rs-50021} closed
DEBUG http-nio-8089-exec-2 druid.sql.Statement - {conn-10002, pstmt-20024} closed
DEBUG http-nio-8089-exec-2 druid.sql.Connection - {conn-10002} pool-recycle
DEBUG http-nio-8089-exec-3 druid.sql.Connection - {conn-10002} pool-connect
DEBUG http-nio-8089-exec-3 druid.sql.Statement - {conn-10002, pstmt-20025} created. select * from `question` where tag=?
DEBUG http-nio-8089-exec-3 druid.sql.Statement - {conn-10002, pstmt-20025} Parameters : [List]
DEBUG http-nio-8089-exec-3 druid.sql.Statement - {conn-10002, pstmt-20025} Types : [VARCHAR]
DEBUG http-nio-8089-exec-3 druid.sql.Statement - {conn-10002, pstmt-20025} executed. 45.567 millis. select * from `question` where tag=?
DEBUG http-nio-8089-exec-3 druid.sql.ResultSet - {conn-10002, pstmt-20025, rs-50022} open
DEBUG http-nio-8089-exec-3 druid.sql.ResultSet - {conn-10002, pstmt-20025, rs-50022} Header: [num, title, level, thumb, example, name, tag, func]
DEBUG http-nio-8089-exec-3 druid.sql.ResultSet - {conn-10002, pstmt-20025, rs-50022} Result: [3, 链表的头插法, 易, 0, 21, insertByHead, List, Node insertByHead(int[] nums)]
DEBUG http-nio-8089-exec-3 druid.sql.ResultSet - {conn-10002, pstmt-20025, rs-50022} closed
DEBUG http-nio-8089-exec-3 druid.sql.Statement - {conn-10002, pstmt-20025} closed
DEBUG http-nio-8089-exec-3 druid.sql.Connection - {conn-10002} pool-recycle
DEBUG http-nio-8089-exec-4 druid.sql.Connection - {conn-10002} pool-connect
DEBUG http-nio-8089-exec-4 druid.sql.Statement - {conn-10002, pstmt-20026} created. select * from `question`
DEBUG http-nio-8089-exec-4 druid.sql.Statement - {conn-10002, pstmt-20026} Parameters : []
DEBUG http-nio-8089-exec-4 druid.sql.Statement - {conn-10002, pstmt-20026} Types : []
DEBUG http-nio-8089-exec-4 druid.sql.Statement - {conn-10002, pstmt-20026} executed. 45.0531 millis. select * from `question`
DEBUG http-nio-8089-exec-4 druid.sql.ResultSet - {conn-10002, pstmt-20026, rs-50023} open
DEBUG http-nio-8089-exec-4 druid.sql.ResultSet - {conn-10002, pstmt-20026, rs-50023} Header: [num, title, level, thumb, example, name, tag, func]
DEBUG http-nio-8089-exec-4 druid.sql.ResultSet - {conn-10002, pstmt-20026, rs-50023} Result: [0, 翻转整数, 易, 0, 21, reverseNum, Stack&Queue, int reverseNum(int num)]
DEBUG http-nio-8089-exec-4 druid.sql.ResultSet - {conn-10002, pstmt-20026, rs-50023} Result: [1, 有效的括号, 易, 0, 17, validBrackets, Stack&Queue, boolean validBrackets(String brackets)]
DEBUG http-nio-8089-exec-4 druid.sql.ResultSet - {conn-10002, pstmt-20026, rs-50023} Result: [2, 简化路径, 中, 0, 12, simplifyPath, Stack&Queue, String simplifyPath(String path)]
DEBUG http-nio-8089-exec-4 druid.sql.ResultSet - {conn-10002, pstmt-20026, rs-50023} Result: [3, 链表的头插法, 易, 0, 21, insertByHead, List, Node insertByHead(int[] nums)]
DEBUG http-nio-8089-exec-4 druid.sql.ResultSet - {conn-10002, pstmt-20026, rs-50023} closed
DEBUG http-nio-8089-exec-4 druid.sql.Statement - {conn-10002, pstmt-20026} closed
DEBUG http-nio-8089-exec-4 druid.sql.Connection - {conn-10002} pool-recycle
DEBUG http-nio-8089-exec-5 druid.sql.Connection - {conn-10002} pool-connect
DEBUG http-nio-8089-exec-5 druid.sql.Statement - {conn-10002, pstmt-20027} created. select * from `question` where tag=?
DEBUG http-nio-8089-exec-5 druid.sql.Statement - {conn-10002, pstmt-20027} Parameters : [Stack&Queue]
DEBUG http-nio-8089-exec-5 druid.sql.Statement - {conn-10002, pstmt-20027} Types : [VARCHAR]
DEBUG http-nio-8089-exec-5 druid.sql.Statement - {conn-10002, pstmt-20027} executed. 40.746899 millis. select * from `question` where tag=?
DEBUG http-nio-8089-exec-5 druid.sql.ResultSet - {conn-10002, pstmt-20027, rs-50024} open
DEBUG http-nio-8089-exec-5 druid.sql.ResultSet - {conn-10002, pstmt-20027, rs-50024} Header: [num, title, level, thumb, example, name, tag, func]
DEBUG http-nio-8089-exec-5 druid.sql.ResultSet - {conn-10002, pstmt-20027, rs-50024} Result: [0, 翻转整数, 易, 0, 21, reverseNum, Stack&Queue, int reverseNum(int num)]
DEBUG http-nio-8089-exec-5 druid.sql.ResultSet - {conn-10002, pstmt-20027, rs-50024} Result: [1, 有效的括号, 易, 0, 17, validBrackets, Stack&Queue, boolean validBrackets(String brackets)]
DEBUG http-nio-8089-exec-5 druid.sql.ResultSet - {conn-10002, pstmt-20027, rs-50024} Result: [2, 简化路径, 中, 0, 12, simplifyPath, Stack&Queue, String simplifyPath(String path)]
DEBUG http-nio-8089-exec-5 druid.sql.ResultSet - {conn-10002, pstmt-20027, rs-50024} closed
DEBUG http-nio-8089-exec-5 druid.sql.Statement - {conn-10002, pstmt-20027} closed
DEBUG http-nio-8089-exec-5 druid.sql.Connection - {conn-10002} pool-recycle
DEBUG http-nio-8089-exec-8 druid.sql.Connection - {conn-10002} pool-connect
DEBUG http-nio-8089-exec-8 druid.sql.Statement - {conn-10002, pstmt-20028} created. select * from `question` where tag=?
DEBUG http-nio-8089-exec-8 druid.sql.Statement - {conn-10002, pstmt-20028} Parameters : [List]
DEBUG http-nio-8089-exec-8 druid.sql.Statement - {conn-10002, pstmt-20028} Types : [VARCHAR]
DEBUG http-nio-8089-exec-8 druid.sql.Statement - {conn-10002, pstmt-20028} executed. 41.8737 millis. select * from `question` where tag=?
DEBUG http-nio-8089-exec-8 druid.sql.ResultSet - {conn-10002, pstmt-20028, rs-50025} open
DEBUG http-nio-8089-exec-8 druid.sql.ResultSet - {conn-10002, pstmt-20028, rs-50025} Header: [num, title, level, thumb, example, name, tag, func]
DEBUG http-nio-8089-exec-8 druid.sql.ResultSet - {conn-10002, pstmt-20028, rs-50025} Result: [3, 链表的头插法, 易, 0, 21, insertByHead, List, Node insertByHead(int[] nums)]
DEBUG http-nio-8089-exec-8 druid.sql.ResultSet - {conn-10002, pstmt-20028, rs-50025} closed
DEBUG http-nio-8089-exec-8 druid.sql.Statement - {conn-10002, pstmt-20028} closed
DEBUG http-nio-8089-exec-8 druid.sql.Connection - {conn-10002} pool-recycle
DEBUG http-nio-8089-exec-7 druid.sql.Connection - {conn-10002} closed
DEBUG http-nio-8089-exec-7 druid.sql.Connection - {conn-10001} closed
DEBUG Druid-ConnectionPool-Create-1400363167 druid.sql.Connection - {conn-10003,procId-280} connected
DEBUG http-nio-8089-exec-7 druid.sql.Connection - {conn-10003} pool-connect
DEBUG http-nio-8089-exec-7 druid.sql.Statement - {conn-10003, pstmt-20029} created. select * from `problem`
DEBUG http-nio-8089-exec-7 druid.sql.Statement - {conn-10003, pstmt-20029} Parameters : []
DEBUG http-nio-8089-exec-7 druid.sql.Statement - {conn-10003, pstmt-20029} Types : []
DEBUG http-nio-8089-exec-7 druid.sql.Statement - {conn-10003, pstmt-20029} executed. 69.1903 millis. select * from `problem`
DEBUG http-nio-8089-exec-7 druid.sql.ResultSet - {conn-10003, pstmt-20029, rs-50026} open
DEBUG http-nio-8089-exec-7 druid.sql.ResultSet - {conn-10003, pstmt-20029, rs-50026} Header: [num, title, href, level, tag]
DEBUG http-nio-8089-exec-7 druid.sql.ResultSet - {conn-10003, pstmt-20029, rs-50026} Result: [1, 盛最多水的容器, https://leetcode-cn.com/problems/container-with-most-water/, 难, 双指针]
DEBUG http-nio-8089-exec-7 druid.sql.ResultSet - {conn-10003, pstmt-20029, rs-50026} Result: [2, 无重复字符的最长子串, https://leetcode-cn.com/problems/longest-substring-without-repeating-characters/, 中, 哈希、滑动窗口]
DEBUG http-nio-8089-exec-7 druid.sql.ResultSet - {conn-10003, pstmt-20029, rs-50026} Result: [3, 正则表达式匹配, https://leetcode-cn.com/problems/regular-expression-matching/, 难, 动态规划、有限自动机]
DEBUG http-nio-8089-exec-7 druid.sql.ResultSet - {conn-10003, pstmt-20029, rs-50026} closed
DEBUG http-nio-8089-exec-7 druid.sql.Statement - {conn-10003, pstmt-20029} closed
DEBUG http-nio-8089-exec-7 druid.sql.Connection - {conn-10003} pool-recycle
DEBUG http-nio-8089-exec-9 druid.sql.Connection - {conn-10003} pool-connect
DEBUG http-nio-8089-exec-9 druid.sql.Statement - {conn-10003, pstmt-20030} created. select * from `question` where tag=?
DEBUG http-nio-8089-exec-9 druid.sql.Statement - {conn-10003, pstmt-20030} Parameters : [List]
DEBUG http-nio-8089-exec-9 druid.sql.Statement - {conn-10003, pstmt-20030} Types : [VARCHAR]
DEBUG http-nio-8089-exec-9 druid.sql.Statement - {conn-10003, pstmt-20030} executed. 42.454099 millis. select * from `question` where tag=?
DEBUG http-nio-8089-exec-9 druid.sql.ResultSet - {conn-10003, pstmt-20030, rs-50027} open
DEBUG http-nio-8089-exec-9 druid.sql.ResultSet - {conn-10003, pstmt-20030, rs-50027} Header: [num, title, level, thumb, example, name, tag, func]
DEBUG http-nio-8089-exec-9 druid.sql.ResultSet - {conn-10003, pstmt-20030, rs-50027} Result: [3, 链表的头插法, 易, 0, 21, insertByHead, List, Node insertByHead(int[] nums)]
DEBUG http-nio-8089-exec-9 druid.sql.ResultSet - {conn-10003, pstmt-20030, rs-50027} closed
DEBUG http-nio-8089-exec-9 druid.sql.Statement - {conn-10003, pstmt-20030} closed
DEBUG http-nio-8089-exec-9 druid.sql.Connection - {conn-10003} pool-recycle
DEBUG http-nio-8089-exec-10 druid.sql.Connection - {conn-10003} pool-connect
DEBUG http-nio-8089-exec-10 druid.sql.Statement - {conn-10003, pstmt-20031} created. select * from `question` where tag=?
DEBUG http-nio-8089-exec-10 druid.sql.Statement - {conn-10003, pstmt-20031} Parameters : [Stack&Queue]
DEBUG http-nio-8089-exec-10 druid.sql.Statement - {conn-10003, pstmt-20031} Types : [VARCHAR]
DEBUG http-nio-8089-exec-10 druid.sql.Statement - {conn-10003, pstmt-20031} executed. 42.9328 millis. select * from `question` where tag=?
DEBUG http-nio-8089-exec-10 druid.sql.ResultSet - {conn-10003, pstmt-20031, rs-50028} open
DEBUG http-nio-8089-exec-10 druid.sql.ResultSet - {conn-10003, pstmt-20031, rs-50028} Header: [num, title, level, thumb, example, name, tag, func]
DEBUG http-nio-8089-exec-10 druid.sql.ResultSet - {conn-10003, pstmt-20031, rs-50028} Result: [0, 翻转整数, 易, 0, 21, reverseNum, Stack&Queue, int reverseNum(int num)]
DEBUG http-nio-8089-exec-10 druid.sql.ResultSet - {conn-10003, pstmt-20031, rs-50028} Result: [1, 有效的括号, 易, 0, 17, validBrackets, Stack&Queue, boolean validBrackets(String brackets)]
DEBUG http-nio-8089-exec-10 druid.sql.ResultSet - {conn-10003, pstmt-20031, rs-50028} Result: [2, 简化路径, 中, 0, 12, simplifyPath, Stack&Queue, String simplifyPath(String path)]
DEBUG http-nio-8089-exec-10 druid.sql.ResultSet - {conn-10003, pstmt-20031, rs-50028} closed
DEBUG http-nio-8089-exec-10 druid.sql.Statement - {conn-10003, pstmt-20031} closed
DEBUG http-nio-8089-exec-10 druid.sql.Connection - {conn-10003} pool-recycle
DEBUG http-nio-8089-exec-6 druid.sql.Connection - {conn-10003} closed
DEBUG Druid-ConnectionPool-Create-1400363167 druid.sql.Connection - {conn-10004,procId-282} connected
DEBUG http-nio-8089-exec-6 druid.sql.Connection - {conn-10004} pool-connect
DEBUG http-nio-8089-exec-6 druid.sql.Statement - {conn-10004, pstmt-20032} created. select * from `question` where tag=?
DEBUG http-nio-8089-exec-6 druid.sql.Statement - {conn-10004, pstmt-20032} Parameters : [List]
DEBUG http-nio-8089-exec-6 druid.sql.Statement - {conn-10004, pstmt-20032} Types : [VARCHAR]
DEBUG http-nio-8089-exec-6 druid.sql.Statement - {conn-10004, pstmt-20032} executed. 42.8927 millis. select * from `question` where tag=?
DEBUG http-nio-8089-exec-6 druid.sql.ResultSet - {conn-10004, pstmt-20032, rs-50029} open
DEBUG http-nio-8089-exec-6 druid.sql.ResultSet - {conn-10004, pstmt-20032, rs-50029} Header: [num, title, level, thumb, example, name, tag, func]
DEBUG http-nio-8089-exec-6 druid.sql.ResultSet - {conn-10004, pstmt-20032, rs-50029} Result: [3, 链表的头插法, 易, 0, 21, insertByHead, List, Node insertByHead(int[] nums)]
DEBUG http-nio-8089-exec-6 druid.sql.ResultSet - {conn-10004, pstmt-20032, rs-50029} closed
DEBUG http-nio-8089-exec-6 druid.sql.Statement - {conn-10004, pstmt-20032} closed
DEBUG http-nio-8089-exec-6 druid.sql.Connection - {conn-10004} pool-recycle
DEBUG http-nio-8089-exec-1 druid.sql.Connection - {conn-10004} pool-connect
DEBUG http-nio-8089-exec-1 druid.sql.Statement - {conn-10004, pstmt-20033} created. select * from `detail` where `num`=?
DEBUG http-nio-8089-exec-1 druid.sql.Statement - {conn-10004, pstmt-20033} Parameters : [3]
DEBUG http-nio-8089-exec-1 druid.sql.Statement - {conn-10004, pstmt-20033} Types : [INTEGER]
DEBUG http-nio-8089-exec-1 druid.sql.Statement - {conn-10004, pstmt-20033} executed. 42.838601 millis. select * from `detail` where `num`=?
DEBUG http-nio-8089-exec-1 druid.sql.ResultSet - {conn-10004, pstmt-20033, rs-50030} open
DEBUG http-nio-8089-exec-1 druid.sql.ResultSet - {conn-10004, pstmt-20033, rs-50030} Header: [num, title, desc, memory_limit, time_limit, example_input, example_output, tips, customized]
DEBUG http-nio-8089-exec-1 druid.sql.ResultSet - {conn-10004, pstmt-20033, rs-50030} Result: [3, 链表的头插法, 链表是一种基础的数据结构，数据由链子一样相连，本题为最简单的单向链表，请你实现单向链表的头插法，即将数据从链表头部进行插入整体链表后移的操作, 0, 0, [1,2,3,4,5,6,7,8,9], 9->8->7->6->5->4->3->2->1, 基础链表, 0]
DEBUG http-nio-8089-exec-1 druid.sql.ResultSet - {conn-10004, pstmt-20033, rs-50030} closed
DEBUG http-nio-8089-exec-1 druid.sql.Statement - {conn-10004, pstmt-20033} closed
DEBUG http-nio-8089-exec-1 druid.sql.Connection - {conn-10004} pool-recycle
DEBUG http-nio-8089-exec-2 druid.sql.Connection - {conn-10004} pool-connect
DEBUG http-nio-8089-exec-2 druid.sql.Statement - {conn-10004, pstmt-20034} created. select * from `question` where num=?
DEBUG http-nio-8089-exec-2 druid.sql.Statement - {conn-10004, pstmt-20034} Parameters : [3]
DEBUG http-nio-8089-exec-2 druid.sql.Statement - {conn-10004, pstmt-20034} Types : [INTEGER]
DEBUG http-nio-8089-exec-2 druid.sql.Statement - {conn-10004, pstmt-20034} executed. 47.2713 millis. select * from `question` where num=?
DEBUG http-nio-8089-exec-2 druid.sql.ResultSet - {conn-10004, pstmt-20034, rs-50031} open
DEBUG http-nio-8089-exec-2 druid.sql.ResultSet - {conn-10004, pstmt-20034, rs-50031} Header: [num, title, level, thumb, example, name, tag, func]
DEBUG http-nio-8089-exec-2 druid.sql.ResultSet - {conn-10004, pstmt-20034, rs-50031} Result: [3, 链表的头插法, 易, 0, 21, insertByHead, List, Node insertByHead(int[] nums)]
DEBUG http-nio-8089-exec-2 druid.sql.ResultSet - {conn-10004, pstmt-20034, rs-50031} closed
DEBUG http-nio-8089-exec-2 druid.sql.Statement - {conn-10004, pstmt-20034} closed
DEBUG http-nio-8089-exec-2 druid.sql.Connection - {conn-10004} pool-recycle
DEBUG Druid-ConnectionPool-Create-1400363167 druid.sql.Connection - {conn-10005,procId-283} connected
DEBUG http-nio-8089-exec-3 druid.sql.Connection - {conn-10005} pool-connect
DEBUG http-nio-8089-exec-3 druid.sql.Statement - {conn-10005, pstmt-20035} created. select * from `detail` where `num`=?
DEBUG http-nio-8089-exec-3 druid.sql.Statement - {conn-10005, pstmt-20035} Parameters : [3]
DEBUG http-nio-8089-exec-3 druid.sql.Statement - {conn-10005, pstmt-20035} Types : [INTEGER]
DEBUG http-nio-8089-exec-4 druid.sql.Connection - {conn-10004} pool-connect
DEBUG http-nio-8089-exec-4 druid.sql.Statement - {conn-10004, pstmt-20036} created. select * from `question` where num=?
DEBUG http-nio-8089-exec-4 druid.sql.Statement - {conn-10004, pstmt-20036} Parameters : [3]
DEBUG http-nio-8089-exec-4 druid.sql.Statement - {conn-10004, pstmt-20036} Types : [INTEGER]
DEBUG http-nio-8089-exec-3 druid.sql.Statement - {conn-10005, pstmt-20035} executed. 45.218299 millis. select * from `detail` where `num`=?
DEBUG http-nio-8089-exec-3 druid.sql.ResultSet - {conn-10005, pstmt-20035, rs-50032} open
DEBUG http-nio-8089-exec-3 druid.sql.ResultSet - {conn-10005, pstmt-20035, rs-50032} Header: [num, title, desc, memory_limit, time_limit, example_input, example_output, tips, customized]
DEBUG http-nio-8089-exec-3 druid.sql.ResultSet - {conn-10005, pstmt-20035, rs-50032} Result: [3, 链表的头插法, 链表是一种基础的数据结构，数据由链子一样相连，本题为最简单的单向链表，请你实现单向链表的头插法，即将数据从链表头部进行插入，整体链表后移的操作, 0, 0, [1,2,3,4,5,6,7,8,9], 9->8->7->6->5->4->3->2->1, 基础链表, 0]
DEBUG http-nio-8089-exec-3 druid.sql.ResultSet - {conn-10005, pstmt-20035, rs-50032} closed
DEBUG http-nio-8089-exec-3 druid.sql.Statement - {conn-10005, pstmt-20035} closed
DEBUG http-nio-8089-exec-3 druid.sql.Connection - {conn-10005} pool-recycle
DEBUG http-nio-8089-exec-4 druid.sql.Statement - {conn-10004, pstmt-20036} executed. 44.8406 millis. select * from `question` where num=?
DEBUG http-nio-8089-exec-4 druid.sql.ResultSet - {conn-10004, pstmt-20036, rs-50033} open
DEBUG http-nio-8089-exec-4 druid.sql.ResultSet - {conn-10004, pstmt-20036, rs-50033} Header: [num, title, level, thumb, example, name, tag, func]
DEBUG http-nio-8089-exec-4 druid.sql.ResultSet - {conn-10004, pstmt-20036, rs-50033} Result: [3, 链表的头插法, 易, 0, 21, insertByHead, List, Node insertByHead(int[] nums)]
DEBUG http-nio-8089-exec-4 druid.sql.ResultSet - {conn-10004, pstmt-20036, rs-50033} closed
DEBUG http-nio-8089-exec-4 druid.sql.Statement - {conn-10004, pstmt-20036} closed
DEBUG http-nio-8089-exec-4 druid.sql.Connection - {conn-10004} pool-recycle
DEBUG http-nio-8089-exec-5 druid.sql.Connection - {conn-10004} pool-connect
DEBUG http-nio-8089-exec-5 druid.sql.Statement - {conn-10004, pstmt-20037} created. select * from `detail` where `num`=?
DEBUG http-nio-8089-exec-5 druid.sql.Statement - {conn-10004, pstmt-20037} Parameters : [3]
DEBUG http-nio-8089-exec-5 druid.sql.Statement - {conn-10004, pstmt-20037} Types : [INTEGER]
DEBUG http-nio-8089-exec-5 druid.sql.Statement - {conn-10004, pstmt-20037} executed. 43.224499 millis. select * from `detail` where `num`=?
DEBUG http-nio-8089-exec-5 druid.sql.ResultSet - {conn-10004, pstmt-20037, rs-50034} open
DEBUG http-nio-8089-exec-5 druid.sql.ResultSet - {conn-10004, pstmt-20037, rs-50034} Header: [num, title, desc, memory_limit, time_limit, example_input, example_output, tips, customized]
DEBUG http-nio-8089-exec-5 druid.sql.ResultSet - {conn-10004, pstmt-20037, rs-50034} Result: [3, 链表的头插法, 链表是一种基础的数据结构，数据由链子一样相连，本题为最简单的单向链表，请你实现单向链表的头插法，即将数据从链表头部进行插入，整体链表后移的操作, 0, 4, [1,2,3,4,5,6,7,8,9], 9->8->7->6->5->4->3->2->1, 基础链表, 0]
DEBUG http-nio-8089-exec-5 druid.sql.ResultSet - {conn-10004, pstmt-20037, rs-50034} closed
DEBUG http-nio-8089-exec-5 druid.sql.Statement - {conn-10004, pstmt-20037} closed
DEBUG http-nio-8089-exec-5 druid.sql.Connection - {conn-10004} pool-recycle
DEBUG http-nio-8089-exec-8 druid.sql.Connection - {conn-10004} pool-connect
DEBUG http-nio-8089-exec-8 druid.sql.Statement - {conn-10004, pstmt-20038} created. select * from `question` where num=?
DEBUG http-nio-8089-exec-8 druid.sql.Statement - {conn-10004, pstmt-20038} Parameters : [3]
DEBUG http-nio-8089-exec-8 druid.sql.Statement - {conn-10004, pstmt-20038} Types : [INTEGER]
DEBUG http-nio-8089-exec-8 druid.sql.Statement - {conn-10004, pstmt-20038} executed. 42.3286 millis. select * from `question` where num=?
DEBUG http-nio-8089-exec-8 druid.sql.ResultSet - {conn-10004, pstmt-20038, rs-50035} open
DEBUG http-nio-8089-exec-8 druid.sql.ResultSet - {conn-10004, pstmt-20038, rs-50035} Header: [num, title, level, thumb, example, name, tag, func]
DEBUG http-nio-8089-exec-8 druid.sql.ResultSet - {conn-10004, pstmt-20038, rs-50035} Result: [3, 链表的头插法, 易, 0, 21, insertByHead, List, Node insertByHead(int[] nums)]
DEBUG http-nio-8089-exec-8 druid.sql.ResultSet - {conn-10004, pstmt-20038, rs-50035} closed
DEBUG http-nio-8089-exec-8 druid.sql.Statement - {conn-10004, pstmt-20038} closed
DEBUG http-nio-8089-exec-8 druid.sql.Connection - {conn-10004} pool-recycle
DEBUG http-nio-8089-exec-7 druid.sql.Connection - {conn-10004} pool-connect
DEBUG http-nio-8089-exec-7 druid.sql.Statement - {conn-10004, pstmt-20039} created. select * from `question`
DEBUG http-nio-8089-exec-7 druid.sql.Statement - {conn-10004, pstmt-20039} Parameters : []
DEBUG http-nio-8089-exec-7 druid.sql.Statement - {conn-10004, pstmt-20039} Types : []
DEBUG http-nio-8089-exec-7 druid.sql.Statement - {conn-10004, pstmt-20039} executed. 42.799199 millis. select * from `question`
DEBUG http-nio-8089-exec-7 druid.sql.ResultSet - {conn-10004, pstmt-20039, rs-50036} open
DEBUG http-nio-8089-exec-7 druid.sql.ResultSet - {conn-10004, pstmt-20039, rs-50036} Header: [num, title, level, thumb, example, name, tag, func]
DEBUG http-nio-8089-exec-7 druid.sql.ResultSet - {conn-10004, pstmt-20039, rs-50036} Result: [0, 翻转整数, 易, 0, 21, reverseNum, Stack&Queue, int reverseNum(int num)]
DEBUG http-nio-8089-exec-7 druid.sql.ResultSet - {conn-10004, pstmt-20039, rs-50036} Result: [1, 有效的括号, 易, 0, 17, validBrackets, Stack&Queue, boolean validBrackets(String brackets)]
DEBUG http-nio-8089-exec-7 druid.sql.ResultSet - {conn-10004, pstmt-20039, rs-50036} Result: [2, 简化路径, 中, 0, 12, simplifyPath, Stack&Queue, String simplifyPath(String path)]
DEBUG http-nio-8089-exec-7 druid.sql.ResultSet - {conn-10004, pstmt-20039, rs-50036} Result: [3, 链表的头插法, 易, 0, 21, insertByHead, List, Node insertByHead(int[] nums)]
DEBUG http-nio-8089-exec-7 druid.sql.ResultSet - {conn-10004, pstmt-20039, rs-50036} closed
DEBUG http-nio-8089-exec-7 druid.sql.Statement - {conn-10004, pstmt-20039} closed
DEBUG http-nio-8089-exec-7 druid.sql.Connection - {conn-10004} pool-recycle
DEBUG http-nio-8089-exec-9 druid.sql.Connection - {conn-10004} closed
DEBUG http-nio-8089-exec-9 druid.sql.Connection - {conn-10005} closed
DEBUG Druid-ConnectionPool-Create-1400363167 druid.sql.Connection - {conn-10006,procId-286} connected
DEBUG http-nio-8089-exec-9 druid.sql.Connection - {conn-10006} pool-connect
DEBUG http-nio-8089-exec-9 druid.sql.Statement - {conn-10006, pstmt-20040} created. select * from `question`
DEBUG http-nio-8089-exec-9 druid.sql.Statement - {conn-10006, pstmt-20040} Parameters : []
DEBUG http-nio-8089-exec-9 druid.sql.Statement - {conn-10006, pstmt-20040} Types : []
DEBUG http-nio-8089-exec-9 druid.sql.Statement - {conn-10006, pstmt-20040} executed. 41.8827 millis. select * from `question`
DEBUG http-nio-8089-exec-9 druid.sql.ResultSet - {conn-10006, pstmt-20040, rs-50037} open
DEBUG http-nio-8089-exec-9 druid.sql.ResultSet - {conn-10006, pstmt-20040, rs-50037} Header: [num, title, level, thumb, example, name, tag, func]
DEBUG http-nio-8089-exec-9 druid.sql.ResultSet - {conn-10006, pstmt-20040, rs-50037} Result: [0, 翻转整数, 易, 0, 21, reverseNum, Stack&Queue, int reverseNum(int num)]
DEBUG http-nio-8089-exec-9 druid.sql.ResultSet - {conn-10006, pstmt-20040, rs-50037} Result: [1, 有效的括号, 易, 0, 17, validBrackets, Stack&Queue, boolean validBrackets(String brackets)]
DEBUG http-nio-8089-exec-9 druid.sql.ResultSet - {conn-10006, pstmt-20040, rs-50037} Result: [2, 简化路径, 中, 0, 12, simplifyPath, Stack&Queue, String simplifyPath(String path)]
DEBUG http-nio-8089-exec-9 druid.sql.ResultSet - {conn-10006, pstmt-20040, rs-50037} Result: [3, 链表的头插法, 易, 0, 21, insertByHead, List, Node insertByHead(int[] nums)]
DEBUG http-nio-8089-exec-9 druid.sql.ResultSet - {conn-10006, pstmt-20040, rs-50037} Result: [4, 链表的尾插法, 易, 0, 21, insertByTail, List, Node insertByTail(int[] nums)]
DEBUG http-nio-8089-exec-9 druid.sql.ResultSet - {conn-10006, pstmt-20040, rs-50037} closed
DEBUG http-nio-8089-exec-9 druid.sql.Statement - {conn-10006, pstmt-20040} closed
DEBUG http-nio-8089-exec-9 druid.sql.Connection - {conn-10006} pool-recycle
DEBUG http-nio-8089-exec-10 druid.sql.Connection - {conn-10006} closed
DEBUG Druid-ConnectionPool-Create-1400363167 druid.sql.Connection - {conn-10007,procId-287} connected
DEBUG http-nio-8089-exec-10 druid.sql.Connection - {conn-10007} pool-connect
DEBUG http-nio-8089-exec-10 druid.sql.Statement - {conn-10007, pstmt-20041} created. select * from `question` where tag=?
DEBUG http-nio-8089-exec-10 druid.sql.Statement - {conn-10007, pstmt-20041} Parameters : [List]
DEBUG http-nio-8089-exec-10 druid.sql.Statement - {conn-10007, pstmt-20041} Types : [VARCHAR]
DEBUG http-nio-8089-exec-10 druid.sql.Statement - {conn-10007, pstmt-20041} executed. 44.0953 millis. select * from `question` where tag=?
DEBUG http-nio-8089-exec-10 druid.sql.ResultSet - {conn-10007, pstmt-20041, rs-50038} open
DEBUG http-nio-8089-exec-10 druid.sql.ResultSet - {conn-10007, pstmt-20041, rs-50038} Header: [num, title, level, thumb, example, name, tag, func]
DEBUG http-nio-8089-exec-10 druid.sql.ResultSet - {conn-10007, pstmt-20041, rs-50038} Result: [3, 链表的头插法, 易, 0, 21, insertByHead, List, Node insertByHead(int[] nums)]
DEBUG http-nio-8089-exec-10 druid.sql.ResultSet - {conn-10007, pstmt-20041, rs-50038} Result: [4, 链表的尾插法, 易, 0, 21, insertByTail, List, Node insertByTail(int[] nums)]
DEBUG http-nio-8089-exec-10 druid.sql.ResultSet - {conn-10007, pstmt-20041, rs-50038} closed
DEBUG http-nio-8089-exec-10 druid.sql.Statement - {conn-10007, pstmt-20041} closed
DEBUG http-nio-8089-exec-10 druid.sql.Connection - {conn-10007} pool-recycle
DEBUG http-nio-8089-exec-6 druid.sql.Connection - {conn-10007} pool-connect
DEBUG http-nio-8089-exec-6 druid.sql.Statement - {conn-10007, pstmt-20042} created. select * from `question` where tag=?
DEBUG http-nio-8089-exec-6 druid.sql.Statement - {conn-10007, pstmt-20042} Parameters : [Stack&Queue]
DEBUG http-nio-8089-exec-6 druid.sql.Statement - {conn-10007, pstmt-20042} Types : [VARCHAR]
DEBUG http-nio-8089-exec-6 druid.sql.Statement - {conn-10007, pstmt-20042} executed. 42.1961 millis. select * from `question` where tag=?
DEBUG http-nio-8089-exec-6 druid.sql.ResultSet - {conn-10007, pstmt-20042, rs-50039} open
DEBUG http-nio-8089-exec-6 druid.sql.ResultSet - {conn-10007, pstmt-20042, rs-50039} Header: [num, title, level, thumb, example, name, tag, func]
DEBUG http-nio-8089-exec-6 druid.sql.ResultSet - {conn-10007, pstmt-20042, rs-50039} Result: [0, 翻转整数, 易, 0, 21, reverseNum, Stack&Queue, int reverseNum(int num)]
DEBUG http-nio-8089-exec-6 druid.sql.ResultSet - {conn-10007, pstmt-20042, rs-50039} Result: [1, 有效的括号, 易, 0, 17, validBrackets, Stack&Queue, boolean validBrackets(String brackets)]
DEBUG http-nio-8089-exec-6 druid.sql.ResultSet - {conn-10007, pstmt-20042, rs-50039} Result: [2, 简化路径, 中, 0, 12, simplifyPath, Stack&Queue, String simplifyPath(String path)]
DEBUG http-nio-8089-exec-6 druid.sql.ResultSet - {conn-10007, pstmt-20042, rs-50039} closed
DEBUG http-nio-8089-exec-6 druid.sql.Statement - {conn-10007, pstmt-20042} closed
DEBUG http-nio-8089-exec-6 druid.sql.Connection - {conn-10007} pool-recycle
DEBUG http-nio-8089-exec-1 druid.sql.Connection - {conn-10007} pool-connect
DEBUG http-nio-8089-exec-1 druid.sql.Statement - {conn-10007, pstmt-20043} created. select * from `question`
DEBUG http-nio-8089-exec-1 druid.sql.Statement - {conn-10007, pstmt-20043} Parameters : []
DEBUG http-nio-8089-exec-1 druid.sql.Statement - {conn-10007, pstmt-20043} Types : []
DEBUG http-nio-8089-exec-1 druid.sql.Statement - {conn-10007, pstmt-20043} executed. 44.8283 millis. select * from `question`
DEBUG http-nio-8089-exec-1 druid.sql.ResultSet - {conn-10007, pstmt-20043, rs-50040} open
DEBUG http-nio-8089-exec-1 druid.sql.ResultSet - {conn-10007, pstmt-20043, rs-50040} Header: [num, title, level, thumb, example, name, tag, func]
DEBUG http-nio-8089-exec-1 druid.sql.ResultSet - {conn-10007, pstmt-20043, rs-50040} Result: [0, 翻转整数, 易, 0, 21, reverseNum, Stack&Queue, int reverseNum(int num)]
DEBUG http-nio-8089-exec-1 druid.sql.ResultSet - {conn-10007, pstmt-20043, rs-50040} Result: [1, 有效的括号, 易, 0, 17, validBrackets, Stack&Queue, boolean validBrackets(String brackets)]
DEBUG http-nio-8089-exec-1 druid.sql.ResultSet - {conn-10007, pstmt-20043, rs-50040} Result: [2, 简化路径, 中, 0, 12, simplifyPath, Stack&Queue, String simplifyPath(String path)]
DEBUG http-nio-8089-exec-1 druid.sql.ResultSet - {conn-10007, pstmt-20043, rs-50040} Result: [3, 链表的头插法, 易, 0, 21, insertByHead, List, Node insertByHead(int[] nums)]
DEBUG http-nio-8089-exec-1 druid.sql.ResultSet - {conn-10007, pstmt-20043, rs-50040} Result: [4, 链表的尾插法, 易, 0, 21, insertByTail, List, Node insertByTail(int[] nums)]
DEBUG http-nio-8089-exec-1 druid.sql.ResultSet - {conn-10007, pstmt-20043, rs-50040} closed
DEBUG http-nio-8089-exec-1 druid.sql.Statement - {conn-10007, pstmt-20043} closed
DEBUG http-nio-8089-exec-1 druid.sql.Connection - {conn-10007} pool-recycle
DEBUG http-nio-8089-exec-2 druid.sql.Connection - {conn-10007} closed
DEBUG Druid-ConnectionPool-Create-1400363167 druid.sql.Connection - {conn-10008,procId-288} connected
DEBUG http-nio-8089-exec-3 druid.sql.Connection - {conn-10008} pool-connect
DEBUG http-nio-8089-exec-3 druid.sql.Statement - {conn-10008, pstmt-20044} created. select * from `question` where num=?
DEBUG http-nio-8089-exec-3 druid.sql.Statement - {conn-10008, pstmt-20044} Parameters : [4]
DEBUG http-nio-8089-exec-3 druid.sql.Statement - {conn-10008, pstmt-20044} Types : [INTEGER]
DEBUG http-nio-8089-exec-3 druid.sql.Statement - {conn-10008, pstmt-20044} executed. 40.870001 millis. select * from `question` where num=?
DEBUG http-nio-8089-exec-3 druid.sql.ResultSet - {conn-10008, pstmt-20044, rs-50041} open
DEBUG http-nio-8089-exec-3 druid.sql.ResultSet - {conn-10008, pstmt-20044, rs-50041} Header: [num, title, level, thumb, example, name, tag, func]
DEBUG http-nio-8089-exec-3 druid.sql.ResultSet - {conn-10008, pstmt-20044, rs-50041} Result: [4, 链表的尾插法, 易, 0, 21, insertByTail, List, Node insertByTail(int[] nums)]
DEBUG http-nio-8089-exec-3 druid.sql.ResultSet - {conn-10008, pstmt-20044, rs-50041} closed
DEBUG http-nio-8089-exec-3 druid.sql.Statement - {conn-10008, pstmt-20044} closed
DEBUG http-nio-8089-exec-3 druid.sql.Connection - {conn-10008} pool-recycle
DEBUG http-nio-8089-exec-2 druid.sql.Connection - {conn-10008} pool-connect
DEBUG http-nio-8089-exec-2 druid.sql.Statement - {conn-10008, pstmt-20045} created. select * from `detail` where `num`=?
DEBUG http-nio-8089-exec-2 druid.sql.Statement - {conn-10008, pstmt-20045} Parameters : [4]
DEBUG http-nio-8089-exec-2 druid.sql.Statement - {conn-10008, pstmt-20045} Types : [INTEGER]
DEBUG http-nio-8089-exec-2 druid.sql.Statement - {conn-10008, pstmt-20045} executed. 41.6314 millis. select * from `detail` where `num`=?
DEBUG http-nio-8089-exec-2 druid.sql.ResultSet - {conn-10008, pstmt-20045, rs-50042} open
DEBUG http-nio-8089-exec-2 druid.sql.ResultSet - {conn-10008, pstmt-20045, rs-50042} Header: [num, title, desc, memory_limit, time_limit, example_input, example_output, tips, customized]
DEBUG http-nio-8089-exec-2 druid.sql.ResultSet - {conn-10008, pstmt-20045, rs-50042} Result: [4, 链表的尾插法, 若你已完成链表的头插法，相信一定对链表有了初步的认识，这里介绍单向链表的另一种插入方法：尾插法。数据从链表尾部进行插入, 0, 4, [1,2,3,4,5,6,7,8,9], 1->2->3->4->5->6->7->8->9, 基础链表, 0]
DEBUG http-nio-8089-exec-2 druid.sql.ResultSet - {conn-10008, pstmt-20045, rs-50042} closed
DEBUG http-nio-8089-exec-2 druid.sql.Statement - {conn-10008, pstmt-20045} closed
DEBUG http-nio-8089-exec-2 druid.sql.Connection - {conn-10008} pool-recycle
DEBUG Druid-ConnectionPool-Create-1400363167 druid.sql.Connection - {conn-10009,procId-289} connected
DEBUG http-nio-8089-exec-4 druid.sql.Connection - {conn-10009} closed
DEBUG http-nio-8089-exec-4 druid.sql.Connection - {conn-10008} closed
DEBUG Druid-ConnectionPool-Create-1400363167 druid.sql.Connection - {conn-10010,procId-290} connected
DEBUG http-nio-8089-exec-4 druid.sql.Connection - {conn-10010} pool-connect
DEBUG http-nio-8089-exec-4 druid.sql.Statement - {conn-10010, pstmt-20046} created. select * from `question`
DEBUG http-nio-8089-exec-4 druid.sql.Statement - {conn-10010, pstmt-20046} Parameters : []
DEBUG http-nio-8089-exec-4 druid.sql.Statement - {conn-10010, pstmt-20046} Types : []
DEBUG http-nio-8089-exec-4 druid.sql.Statement - {conn-10010, pstmt-20046} executed. 40.206801 millis. select * from `question`
DEBUG http-nio-8089-exec-4 druid.sql.ResultSet - {conn-10010, pstmt-20046, rs-50043} open
DEBUG http-nio-8089-exec-4 druid.sql.ResultSet - {conn-10010, pstmt-20046, rs-50043} Header: [num, title, level, thumb, example, name, tag, func]
DEBUG http-nio-8089-exec-4 druid.sql.ResultSet - {conn-10010, pstmt-20046, rs-50043} Result: [0, 翻转整数, 易, 0, 21, reverseNum, Stack&Queue, int reverseNum(int num)]
DEBUG http-nio-8089-exec-4 druid.sql.ResultSet - {conn-10010, pstmt-20046, rs-50043} Result: [1, 有效的括号, 易, 0, 17, validBrackets, Stack&Queue, boolean validBrackets(String brackets)]
DEBUG http-nio-8089-exec-4 druid.sql.ResultSet - {conn-10010, pstmt-20046, rs-50043} Result: [2, 简化路径, 中, 0, 12, simplifyPath, Stack&Queue, String simplifyPath(String path)]
DEBUG http-nio-8089-exec-4 druid.sql.ResultSet - {conn-10010, pstmt-20046, rs-50043} Result: [3, 链表的头插法, 易, 0, 21, insertByHead, List, Node insertByHead(int[] nums)]
DEBUG http-nio-8089-exec-4 druid.sql.ResultSet - {conn-10010, pstmt-20046, rs-50043} Result: [4, 链表的尾插法, 易, 0, 21, insertByTail, List, Node insertByTail(int[] nums)]
DEBUG http-nio-8089-exec-4 druid.sql.ResultSet - {conn-10010, pstmt-20046, rs-50043} closed
DEBUG http-nio-8089-exec-4 druid.sql.Statement - {conn-10010, pstmt-20046} closed
DEBUG http-nio-8089-exec-4 druid.sql.Connection - {conn-10010} pool-recycle
DEBUG http-nio-8089-exec-5 druid.sql.Connection - {conn-10010} pool-connect
DEBUG http-nio-8089-exec-5 druid.sql.Statement - {conn-10010, pstmt-20047} created. select * from `news` where `version`=?
DEBUG http-nio-8089-exec-5 druid.sql.Statement - {conn-10010, pstmt-20047} Parameters : [1]
DEBUG http-nio-8089-exec-5 druid.sql.Statement - {conn-10010, pstmt-20047} Types : [INTEGER]
DEBUG http-nio-8089-exec-5 druid.sql.Statement - {conn-10010, pstmt-20047} executed. 37.8852 millis. select * from `news` where `version`=?
DEBUG http-nio-8089-exec-5 druid.sql.ResultSet - {conn-10010, pstmt-20047, rs-50044} open
DEBUG http-nio-8089-exec-5 druid.sql.ResultSet - {conn-10010, pstmt-20047, rs-50044} Header: [version, user_num, visit_num, news_one, news_two, news_three, news_four, java_using, c_using, python_using]
DEBUG http-nio-8089-exec-5 druid.sql.ResultSet - {conn-10010, pstmt-20047, rs-50044} Result: [1, 3, 24, 1, 2, 3, 4, 6, 0, 0]
DEBUG http-nio-8089-exec-5 druid.sql.ResultSet - {conn-10010, pstmt-20047, rs-50044} closed
DEBUG http-nio-8089-exec-5 druid.sql.Statement - {conn-10010, pstmt-20047} closed
DEBUG http-nio-8089-exec-5 druid.sql.Connection - {conn-10010} pool-recycle
DEBUG http-nio-8089-exec-8 druid.sql.Connection - {conn-10010} pool-connect
DEBUG http-nio-8089-exec-8 druid.sql.Statement - {conn-10010, pstmt-20048} created. select * from `question`
DEBUG http-nio-8089-exec-8 druid.sql.Statement - {conn-10010, pstmt-20048} Parameters : []
DEBUG http-nio-8089-exec-8 druid.sql.Statement - {conn-10010, pstmt-20048} Types : []
DEBUG http-nio-8089-exec-8 druid.sql.Statement - {conn-10010, pstmt-20048} executed. 40.365199 millis. select * from `question`
DEBUG http-nio-8089-exec-8 druid.sql.ResultSet - {conn-10010, pstmt-20048, rs-50045} open
DEBUG http-nio-8089-exec-8 druid.sql.ResultSet - {conn-10010, pstmt-20048, rs-50045} Header: [num, title, level, thumb, example, name, tag, func]
DEBUG http-nio-8089-exec-8 druid.sql.ResultSet - {conn-10010, pstmt-20048, rs-50045} Result: [0, 翻转整数, 易, 0, 21, reverseNum, Stack&Queue, int reverseNum(int num)]
DEBUG http-nio-8089-exec-8 druid.sql.ResultSet - {conn-10010, pstmt-20048, rs-50045} Result: [1, 有效的括号, 易, 0, 17, validBrackets, Stack&Queue, boolean validBrackets(String brackets)]
DEBUG http-nio-8089-exec-8 druid.sql.ResultSet - {conn-10010, pstmt-20048, rs-50045} Result: [2, 简化路径, 中, 0, 12, simplifyPath, Stack&Queue, String simplifyPath(String path)]
DEBUG http-nio-8089-exec-8 druid.sql.ResultSet - {conn-10010, pstmt-20048, rs-50045} Result: [3, 链表的头插法, 易, 0, 21, insertByHead, List, Node insertByHead(int[] nums)]
DEBUG http-nio-8089-exec-8 druid.sql.ResultSet - {conn-10010, pstmt-20048, rs-50045} Result: [4, 链表的尾插法, 易, 0, 21, insertByTail, List, Node insertByTail(int[] nums)]
DEBUG http-nio-8089-exec-8 druid.sql.ResultSet - {conn-10010, pstmt-20048, rs-50045} closed
DEBUG http-nio-8089-exec-8 druid.sql.Statement - {conn-10010, pstmt-20048} closed
DEBUG http-nio-8089-exec-7 druid.sql.Connection - {conn-10010} pool-connect
DEBUG http-nio-8089-exec-8 druid.sql.Connection - {conn-10010} pool-recycle
DEBUG http-nio-8089-exec-7 druid.sql.Statement - {conn-10010, pstmt-20049} created. select * from `info`
DEBUG http-nio-8089-exec-7 druid.sql.Statement - {conn-10010, pstmt-20049} Parameters : []
DEBUG http-nio-8089-exec-7 druid.sql.Statement - {conn-10010, pstmt-20049} Types : []
DEBUG http-nio-8089-exec-7 druid.sql.Statement - {conn-10010, pstmt-20049} executed. 48.6122 millis. select * from `info`
DEBUG http-nio-8089-exec-7 druid.sql.ResultSet - {conn-10010, pstmt-20049, rs-50046} open
DEBUG http-nio-8089-exec-7 druid.sql.ResultSet - {conn-10010, pstmt-20049, rs-50046} Header: [account, name, finished, simple_finished, middle_finished, hard_finished, finished_index, register_time, grade, skillful_lang, java_finished, c_finished, python_finished]
DEBUG http-nio-8089-exec-7 druid.sql.ResultSet - {conn-10010, pstmt-20049, rs-50046} Result: [1543625674@qq.com, NorthBoat, 2, 0, 0, 0, 101, 2022-04-05 06:05:05.0, null, Java, 2, 0, 0]
DEBUG http-nio-8089-exec-7 druid.sql.ResultSet - {conn-10010, pstmt-20049, rs-50046} Result: [northboat@163.com, 啊哈, 0, 0, 0, 0, 0, 2022-04-06 03:28:32.0, null, null, 0, 0, 0]
DEBUG http-nio-8089-exec-7 druid.sql.ResultSet - {conn-10010, pstmt-20049, rs-50046} Result: [xurongxin@foxmail.com, op, 0, 0, 0, 0, 0, 2022-04-13 01:31:55.0, null, null, 0, 0, 0]
DEBUG http-nio-8089-exec-7 druid.sql.ResultSet - {conn-10010, pstmt-20049, rs-50046} closed
DEBUG http-nio-8089-exec-7 druid.sql.Statement - {conn-10010, pstmt-20049} closed
DEBUG http-nio-8089-exec-7 druid.sql.Connection - {conn-10010} pool-recycle
DEBUG Druid-ConnectionPool-Create-1400363167 druid.sql.Connection - {conn-10011,procId-291} connected
DEBUG http-nio-8089-exec-9 druid.sql.Connection - {conn-10011} pool-connect
DEBUG http-nio-8089-exec-9 druid.sql.Statement - {conn-10011, pstmt-20050} created. select * from `question`
DEBUG http-nio-8089-exec-9 druid.sql.Statement - {conn-10011, pstmt-20050} Parameters : []
DEBUG http-nio-8089-exec-9 druid.sql.Statement - {conn-10011, pstmt-20050} Types : []
DEBUG http-nio-8089-exec-9 druid.sql.Statement - {conn-10011, pstmt-20050} executed. 41.091001 millis. select * from `question`
DEBUG http-nio-8089-exec-9 druid.sql.ResultSet - {conn-10011, pstmt-20050, rs-50047} open
DEBUG http-nio-8089-exec-9 druid.sql.ResultSet - {conn-10011, pstmt-20050, rs-50047} Header: [num, title, level, thumb, example, name, tag, func]
DEBUG http-nio-8089-exec-9 druid.sql.ResultSet - {conn-10011, pstmt-20050, rs-50047} Result: [0, 翻转整数, 易, 0, 21, reverseNum, Stack&Queue, int reverseNum(int num)]
DEBUG http-nio-8089-exec-9 druid.sql.ResultSet - {conn-10011, pstmt-20050, rs-50047} Result: [1, 有效的括号, 易, 0, 17, validBrackets, Stack&Queue, boolean validBrackets(String brackets)]
DEBUG http-nio-8089-exec-9 druid.sql.ResultSet - {conn-10011, pstmt-20050, rs-50047} Result: [2, 简化路径, 中, 0, 12, simplifyPath, Stack&Queue, String simplifyPath(String path)]
DEBUG http-nio-8089-exec-9 druid.sql.ResultSet - {conn-10011, pstmt-20050, rs-50047} Result: [3, 链表的头插法, 易, 0, 21, insertByHead, List, Node insertByHead(int[] nums)]
DEBUG http-nio-8089-exec-9 druid.sql.ResultSet - {conn-10011, pstmt-20050, rs-50047} Result: [4, 链表的尾插法, 易, 0, 21, insertByTail, List, Node insertByTail(int[] nums)]
DEBUG http-nio-8089-exec-9 druid.sql.ResultSet - {conn-10011, pstmt-20050, rs-50047} closed
DEBUG http-nio-8089-exec-9 druid.sql.Statement - {conn-10011, pstmt-20050} closed
DEBUG http-nio-8089-exec-9 druid.sql.Connection - {conn-10011} pool-recycle
DEBUG Druid-ConnectionPool-Destroy-1400363167 druid.sql.Connection - {conn-10010} closed
DEBUG Druid-ConnectionPool-Destroy-1400363167 druid.sql.Connection - {conn-10011} closed
DEBUG Druid-ConnectionPool-Create-1400363167 druid.sql.Connection - {conn-10012,procId-307} connected
DEBUG http-nio-8089-exec-10 druid.sql.Connection - {conn-10012} pool-connect
DEBUG http-nio-8089-exec-10 druid.sql.Statement - {conn-10012, pstmt-20051} created. select * from `question`
DEBUG http-nio-8089-exec-10 druid.sql.Statement - {conn-10012, pstmt-20051} Parameters : []
DEBUG http-nio-8089-exec-10 druid.sql.Statement - {conn-10012, pstmt-20051} Types : []
DEBUG http-nio-8089-exec-10 druid.sql.Statement - {conn-10012, pstmt-20051} executed. 51.2002 millis. select * from `question`
DEBUG http-nio-8089-exec-10 druid.sql.ResultSet - {conn-10012, pstmt-20051, rs-50048} open
DEBUG http-nio-8089-exec-10 druid.sql.ResultSet - {conn-10012, pstmt-20051, rs-50048} Header: [num, title, level, thumb, example, name, tag, func]
DEBUG http-nio-8089-exec-10 druid.sql.ResultSet - {conn-10012, pstmt-20051, rs-50048} Result: [0, 翻转整数, 易, 0, 21, reverseNum, Stack&Queue, int reverseNum(int num)]
DEBUG http-nio-8089-exec-10 druid.sql.ResultSet - {conn-10012, pstmt-20051, rs-50048} Result: [1, 有效的括号, 易, 0, 17, validBrackets, Stack&Queue, boolean validBrackets(String brackets)]
DEBUG http-nio-8089-exec-10 druid.sql.ResultSet - {conn-10012, pstmt-20051, rs-50048} Result: [2, 简化路径, 中, 0, 12, simplifyPath, Stack&Queue, String simplifyPath(String path)]
DEBUG http-nio-8089-exec-10 druid.sql.ResultSet - {conn-10012, pstmt-20051, rs-50048} Result: [3, 链表的头插法, 易, 0, 21, insertByHead, List, Node insertByHead(int[] nums)]
DEBUG http-nio-8089-exec-10 druid.sql.ResultSet - {conn-10012, pstmt-20051, rs-50048} Result: [4, 链表的尾插法, 易, 0, 21, insertByTail, List, Node insertByTail(int[] nums)]
DEBUG http-nio-8089-exec-10 druid.sql.ResultSet - {conn-10012, pstmt-20051, rs-50048} Result: [5, 删除链表的倒数第N个节点, 中, 0, 21, removeNthFromEnd, List, Node removeNthFromEnd(Node head, int n)]
DEBUG http-nio-8089-exec-10 druid.sql.ResultSet - {conn-10012, pstmt-20051, rs-50048} closed
DEBUG http-nio-8089-exec-10 druid.sql.Statement - {conn-10012, pstmt-20051} closed
DEBUG http-nio-8089-exec-10 druid.sql.Connection - {conn-10012} pool-recycle
DEBUG http-nio-8089-exec-6 druid.sql.Connection - {conn-10012} closed
DEBUG Druid-ConnectionPool-Create-1400363167 druid.sql.Connection - {conn-10013,procId-308} connected
DEBUG http-nio-8089-exec-1 druid.sql.Connection - {conn-10013} pool-connect
DEBUG http-nio-8089-exec-1 druid.sql.Statement - {conn-10013, pstmt-20052} created. select * from `question` where num=?
DEBUG http-nio-8089-exec-1 druid.sql.Statement - {conn-10013, pstmt-20052} Parameters : [5]
DEBUG http-nio-8089-exec-1 druid.sql.Statement - {conn-10013, pstmt-20052} Types : [INTEGER]
DEBUG http-nio-8089-exec-1 druid.sql.Statement - {conn-10013, pstmt-20052} executed. 44.2653 millis. select * from `question` where num=?
DEBUG http-nio-8089-exec-1 druid.sql.ResultSet - {conn-10013, pstmt-20052, rs-50049} open
DEBUG http-nio-8089-exec-1 druid.sql.ResultSet - {conn-10013, pstmt-20052, rs-50049} Header: [num, title, level, thumb, example, name, tag, func]
DEBUG http-nio-8089-exec-1 druid.sql.ResultSet - {conn-10013, pstmt-20052, rs-50049} Result: [5, 删除链表的倒数第N个节点, 中, 0, 21, removeNthFromEnd, List, Node removeNthFromEnd(Node head, int n)]
DEBUG http-nio-8089-exec-1 druid.sql.ResultSet - {conn-10013, pstmt-20052, rs-50049} closed
DEBUG http-nio-8089-exec-1 druid.sql.Statement - {conn-10013, pstmt-20052} closed
DEBUG http-nio-8089-exec-1 druid.sql.Connection - {conn-10013} pool-recycle
DEBUG http-nio-8089-exec-6 druid.sql.Connection - {conn-10013} pool-connect
DEBUG http-nio-8089-exec-6 druid.sql.Statement - {conn-10013, pstmt-20053} created. select * from `detail` where `num`=?
DEBUG http-nio-8089-exec-6 druid.sql.Statement - {conn-10013, pstmt-20053} Parameters : [5]
DEBUG http-nio-8089-exec-6 druid.sql.Statement - {conn-10013, pstmt-20053} Types : [INTEGER]
DEBUG http-nio-8089-exec-6 druid.sql.Statement - {conn-10013, pstmt-20053} executed. 43.8379 millis. select * from `detail` where `num`=?
DEBUG http-nio-8089-exec-6 druid.sql.ResultSet - {conn-10013, pstmt-20053, rs-50050} open
DEBUG http-nio-8089-exec-6 druid.sql.ResultSet - {conn-10013, pstmt-20053, rs-50050} Header: [num, title, desc, memory_limit, time_limit, example_input, example_output, tips, customized]
DEBUG http-nio-8089-exec-6 druid.sql.ResultSet - {conn-10013, pstmt-20053, rs-50050} Result: [5, 删除链表的倒数第N个节点, 给你一个完整的链表，请你删除其倒数第N个节点并返回新链表的头节点, 0, 2, 1->2->3->4->5 2, 1->2->3->5, 当链表为1，返回倒数第1个节点时，返回null即可。另外小提示：双指针, 0]
DEBUG http-nio-8089-exec-6 druid.sql.ResultSet - {conn-10013, pstmt-20053, rs-50050} closed
DEBUG http-nio-8089-exec-6 druid.sql.Statement - {conn-10013, pstmt-20053} closed
DEBUG http-nio-8089-exec-6 druid.sql.Connection - {conn-10013} pool-recycle
DEBUG Druid-ConnectionPool-Create-1400363167 druid.sql.Connection - {conn-10014,procId-309} connected
DEBUG http-nio-8089-exec-3 druid.sql.Connection - {conn-10014} pool-connect
DEBUG http-nio-8089-exec-3 druid.sql.Statement - {conn-10014, pstmt-20054} created. select * from `info` where `account`=?
DEBUG http-nio-8089-exec-3 druid.sql.Statement - {conn-10014, pstmt-20054} Parameters : [1543625674@qq.com]
DEBUG http-nio-8089-exec-3 druid.sql.Statement - {conn-10014, pstmt-20054} Types : [VARCHAR]
DEBUG http-nio-8089-exec-3 druid.sql.Statement - {conn-10014, pstmt-20054} executed. 79.6415 millis. select * from `info` where `account`=?
DEBUG http-nio-8089-exec-3 druid.sql.ResultSet - {conn-10014, pstmt-20054, rs-50051} open
DEBUG http-nio-8089-exec-3 druid.sql.ResultSet - {conn-10014, pstmt-20054, rs-50051} Header: [account, name, finished, simple_finished, middle_finished, hard_finished, finished_index, register_time, grade, skillful_lang, java_finished, c_finished, python_finished]
DEBUG http-nio-8089-exec-3 druid.sql.ResultSet - {conn-10014, pstmt-20054, rs-50051} Result: [1543625674@qq.com, NorthBoat, 2, 0, 0, 0, 101, 2022-04-05 06:05:05.0, null, Java, 2, 0, 0]
DEBUG http-nio-8089-exec-3 druid.sql.ResultSet - {conn-10014, pstmt-20054, rs-50051} closed
DEBUG http-nio-8089-exec-3 druid.sql.Statement - {conn-10014, pstmt-20054} closed
DEBUG http-nio-8089-exec-3 druid.sql.Connection - {conn-10014} pool-recycle
DEBUG http-nio-8089-exec-3 druid.sql.Connection - {conn-10014} pool-connect
DEBUG http-nio-8089-exec-3 druid.sql.Statement - {conn-10014, pstmt-20055} created. update `info` set finished=?, java_finished=?, c_finished=?, python_finished=?, finished_index=?, skillful_lang=? where `account`=?
DEBUG http-nio-8089-exec-3 druid.sql.Statement - {conn-10014, pstmt-20055} Parameters : [2, 2, 0, 0, 101, Java, 1543625674@qq.com]
DEBUG http-nio-8089-exec-3 druid.sql.Statement - {conn-10014, pstmt-20055} Types : [INTEGER, INTEGER, INTEGER, INTEGER, VARCHAR, VARCHAR, VARCHAR]
DEBUG http-nio-8089-exec-3 druid.sql.Statement - {conn-10014, pstmt-20055} executed. 82.2584 millis. update `info` set finished=?, java_finished=?, c_finished=?, python_finished=?, finished_index=?, skillful_lang=? where `account`=?
DEBUG http-nio-8089-exec-3 druid.sql.Statement - {conn-10014, pstmt-20055} closed
DEBUG http-nio-8089-exec-3 druid.sql.Connection - {conn-10014} pool-recycle
DEBUG http-nio-8089-exec-2 druid.sql.Connection - {conn-10014} pool-connect
DEBUG http-nio-8089-exec-2 druid.sql.Statement - {conn-10014, pstmt-20056} created. select * from `result` where `account` = ? and `num` = ?
DEBUG http-nio-8089-exec-2 druid.sql.Statement - {conn-10014, pstmt-20056} Parameters : [1543625674@qq.com, 5]
DEBUG http-nio-8089-exec-2 druid.sql.Statement - {conn-10014, pstmt-20056} Types : [VARCHAR, INTEGER]
DEBUG http-nio-8089-exec-2 druid.sql.Statement - {conn-10014, pstmt-20056} executed. 45.7977 millis. select * from `result` where `account` = ? and `num` = ?
DEBUG http-nio-8089-exec-2 druid.sql.ResultSet - {conn-10014, pstmt-20056, rs-50052} open
DEBUG http-nio-8089-exec-2 druid.sql.ResultSet - {conn-10014, pstmt-20056, rs-50052} Header: [account, num, title, key1, key2, key3, key4, val1, val2, val3, val4, code]
DEBUG http-nio-8089-exec-2 druid.sql.ResultSet - {conn-10014, pstmt-20056, rs-50052} closed
DEBUG http-nio-8089-exec-2 druid.sql.Statement - {conn-10014, pstmt-20056} closed
DEBUG http-nio-8089-exec-2 druid.sql.Connection - {conn-10014} pool-recycle
DEBUG http-nio-8089-exec-2 druid.sql.Connection - {conn-10014} pool-connect
DEBUG http-nio-8089-exec-2 druid.sql.Statement - {conn-10014, pstmt-20057} created. insert into `result`(`account`, `num`, `title`, `key1`, `key2`, `key3`, `key4`, `val1`, `val2`, `val3`, `val4`, `code`) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
DEBUG http-nio-8089-exec-2 druid.sql.Statement - {conn-10014, pstmt-20057} Parameters : [1543625674@qq.com, 5, 编译失败 QAQ, 通过样例:, 错误信息:, 容器创建时间:, 容器销毁时间:, 0, 18: error: missing return statement
	}
	^
1 error
, 1423, 885ms, /*<br>你所用到的节点数据结构<br>class Node{<br>&nbsp;&nbsp;&nbsp;&nbsp;int val;<br>&nbsp;&nbsp;&nbsp;&nbsp;Node next;<br>&nbsp;&nbsp;&nbsp;&nbsp;public Node(){}<br>&nbsp;&nbsp;&nbsp;&nbsp;public Node(int val){ this.val = val; }<br>&nbsp;&nbsp;&nbsp;&nbsp;public Node(int val, Node next){ this.val = val; this.next = next; }<br>}<br>*/<br><br><br>class Solution{<br>&nbsp;&nbsp;&nbsp;&nbsp;public Node removeNthFromEnd(Node head, int n){<br><br>&nbsp;&nbsp;&nbsp;&nbsp;}<br>}]
DEBUG http-nio-8089-exec-2 druid.sql.Statement - {conn-10014, pstmt-20057} Types : [VARCHAR, INTEGER, VARCHAR, VARCHAR, VARCHAR, VARCHAR, VARCHAR, VARCHAR, VARCHAR, VARCHAR, VARCHAR, VARCHAR]
DEBUG http-nio-8089-exec-2 druid.sql.Statement - {conn-10014, pstmt-20057} executed. 80.3873 millis. insert into `result`(`account`, `num`, `title`, `key1`, `key2`, `key3`, `key4`, `val1`, `val2`, `val3`, `val4`, `code`) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
DEBUG http-nio-8089-exec-2 druid.sql.Statement - {conn-10014, pstmt-20057} closed
DEBUG http-nio-8089-exec-2 druid.sql.Connection - {conn-10014} pool-recycle
DEBUG http-nio-8089-exec-4 druid.sql.Connection - {conn-10014} closed
DEBUG http-nio-8089-exec-4 druid.sql.Connection - {conn-10013} closed
DEBUG Druid-ConnectionPool-Create-1400363167 druid.sql.Connection - {conn-10015,procId-310} connected
DEBUG http-nio-8089-exec-4 druid.sql.Connection - {conn-10015} pool-connect
DEBUG http-nio-8089-exec-4 druid.sql.Statement - {conn-10015, pstmt-20058} created. select * from `question`
DEBUG http-nio-8089-exec-4 druid.sql.Statement - {conn-10015, pstmt-20058} Parameters : []
DEBUG http-nio-8089-exec-4 druid.sql.Statement - {conn-10015, pstmt-20058} Types : []
DEBUG http-nio-8089-exec-4 druid.sql.Statement - {conn-10015, pstmt-20058} executed. 88.0226 millis. select * from `question`
DEBUG http-nio-8089-exec-4 druid.sql.ResultSet - {conn-10015, pstmt-20058, rs-50053} open
DEBUG http-nio-8089-exec-4 druid.sql.ResultSet - {conn-10015, pstmt-20058, rs-50053} Header: [num, title, level, thumb, example, name, tag, func]
DEBUG http-nio-8089-exec-4 druid.sql.ResultSet - {conn-10015, pstmt-20058, rs-50053} Result: [0, 翻转整数, 易, 0, 21, reverseNum, Stack&Queue, int reverseNum(int num)]
DEBUG http-nio-8089-exec-4 druid.sql.ResultSet - {conn-10015, pstmt-20058, rs-50053} Result: [1, 有效的括号, 易, 0, 17, validBrackets, Stack&Queue, boolean validBrackets(String brackets)]
DEBUG http-nio-8089-exec-4 druid.sql.ResultSet - {conn-10015, pstmt-20058, rs-50053} Result: [2, 简化路径, 中, 0, 12, simplifyPath, Stack&Queue, String simplifyPath(String path)]
DEBUG http-nio-8089-exec-4 druid.sql.ResultSet - {conn-10015, pstmt-20058, rs-50053} Result: [3, 链表的头插法, 易, 0, 21, insertByHead, List, Node insertByHead(int[] nums)]
DEBUG http-nio-8089-exec-4 druid.sql.ResultSet - {conn-10015, pstmt-20058, rs-50053} Result: [4, 链表的尾插法, 易, 0, 21, insertByTail, List, Node insertByTail(int[] nums)]
DEBUG http-nio-8089-exec-4 druid.sql.ResultSet - {conn-10015, pstmt-20058, rs-50053} Result: [5, 删除链表的倒数第N个节点, 中, 0, 21, removeNthFromEnd, List, Node removeNthFromEnd(Node head, int n)]
DEBUG http-nio-8089-exec-4 druid.sql.ResultSet - {conn-10015, pstmt-20058, rs-50053} closed
DEBUG http-nio-8089-exec-4 druid.sql.Statement - {conn-10015, pstmt-20058} closed
DEBUG http-nio-8089-exec-4 druid.sql.Connection - {conn-10015} pool-recycle
DEBUG http-nio-8089-exec-5 druid.sql.Connection - {conn-10015} closed
DEBUG Druid-ConnectionPool-Create-1400363167 druid.sql.Connection - {conn-10016,procId-311} connected
DEBUG http-nio-8089-exec-5 druid.sql.Connection - {conn-10016} pool-connect
DEBUG http-nio-8089-exec-5 druid.sql.Statement - {conn-10016, pstmt-20059} created. select * from `question`
DEBUG http-nio-8089-exec-5 druid.sql.Statement - {conn-10016, pstmt-20059} Parameters : []
DEBUG http-nio-8089-exec-5 druid.sql.Statement - {conn-10016, pstmt-20059} Types : []
DEBUG http-nio-8089-exec-5 druid.sql.Statement - {conn-10016, pstmt-20059} executed. 44.0991 millis. select * from `question`
DEBUG http-nio-8089-exec-5 druid.sql.ResultSet - {conn-10016, pstmt-20059, rs-50054} open
DEBUG http-nio-8089-exec-5 druid.sql.ResultSet - {conn-10016, pstmt-20059, rs-50054} Header: [num, title, level, thumb, example, name, tag, func]
DEBUG http-nio-8089-exec-5 druid.sql.ResultSet - {conn-10016, pstmt-20059, rs-50054} Result: [0, 翻转整数, 易, 0, 21, reverseNum, Stack&Queue, int reverseNum(int num)]
DEBUG http-nio-8089-exec-5 druid.sql.ResultSet - {conn-10016, pstmt-20059, rs-50054} Result: [1, 有效的括号, 易, 0, 17, validBrackets, Stack&Queue, boolean validBrackets(String brackets)]
DEBUG http-nio-8089-exec-5 druid.sql.ResultSet - {conn-10016, pstmt-20059, rs-50054} Result: [2, 简化路径, 中, 0, 12, simplifyPath, Stack&Queue, String simplifyPath(String path)]
DEBUG http-nio-8089-exec-5 druid.sql.ResultSet - {conn-10016, pstmt-20059, rs-50054} Result: [3, 链表的头插法, 易, 0, 21, insertByHead, List, Node insertByHead(int[] nums)]
DEBUG http-nio-8089-exec-5 druid.sql.ResultSet - {conn-10016, pstmt-20059, rs-50054} Result: [4, 链表的尾插法, 易, 0, 21, insertByTail, List, Node insertByTail(int[] nums)]
DEBUG http-nio-8089-exec-5 druid.sql.ResultSet - {conn-10016, pstmt-20059, rs-50054} Result: [5, 删除链表的倒数第N个节点, 中, 0, 21, removeNthFromEnd, List, Node removeNthFromEnd(Node head, int n)]
DEBUG http-nio-8089-exec-5 druid.sql.ResultSet - {conn-10016, pstmt-20059, rs-50054} closed
DEBUG http-nio-8089-exec-5 druid.sql.Statement - {conn-10016, pstmt-20059} closed
DEBUG http-nio-8089-exec-5 druid.sql.Connection - {conn-10016} pool-recycle
DEBUG http-nio-8089-exec-8 druid.sql.Connection - {conn-10016} closed
DEBUG Druid-ConnectionPool-Create-1400363167 druid.sql.Connection - {conn-10017,procId-312} connected
DEBUG http-nio-8089-exec-8 druid.sql.Connection - {conn-10017} pool-connect
DEBUG http-nio-8089-exec-8 druid.sql.Statement - {conn-10017, pstmt-20060} created. select * from `question` where tag=?
DEBUG http-nio-8089-exec-8 druid.sql.Statement - {conn-10017, pstmt-20060} Parameters : [String&Arr]
DEBUG http-nio-8089-exec-8 druid.sql.Statement - {conn-10017, pstmt-20060} Types : [VARCHAR]
DEBUG http-nio-8089-exec-8 druid.sql.Statement - {conn-10017, pstmt-20060} executed. 54.944 millis. select * from `question` where tag=?
DEBUG http-nio-8089-exec-8 druid.sql.ResultSet - {conn-10017, pstmt-20060, rs-50055} open
DEBUG http-nio-8089-exec-8 druid.sql.ResultSet - {conn-10017, pstmt-20060, rs-50055} Header: [num, title, level, thumb, example, name, tag, func]
DEBUG http-nio-8089-exec-8 druid.sql.ResultSet - {conn-10017, pstmt-20060, rs-50055} Result: [6, 最长的公共前缀, 易, 0, 17, longestCommonPrefix, String&Arr, String longestCommonPrefix(String[] strs)]
DEBUG http-nio-8089-exec-8 druid.sql.ResultSet - {conn-10017, pstmt-20060, rs-50055} closed
DEBUG http-nio-8089-exec-8 druid.sql.Statement - {conn-10017, pstmt-20060} closed
DEBUG http-nio-8089-exec-8 druid.sql.Connection - {conn-10017} pool-recycle
DEBUG http-nio-8089-exec-7 druid.sql.Connection - {conn-10017} closed
DEBUG Druid-ConnectionPool-Create-1400363167 druid.sql.Connection - {conn-10018,procId-313} connected
DEBUG http-nio-8089-exec-7 druid.sql.Connection - {conn-10018} pool-connect
DEBUG http-nio-8089-exec-7 druid.sql.Statement - {conn-10018, pstmt-20061} created. select * from `question`
DEBUG http-nio-8089-exec-7 druid.sql.Statement - {conn-10018, pstmt-20061} Parameters : []
DEBUG http-nio-8089-exec-7 druid.sql.Statement - {conn-10018, pstmt-20061} Types : []
DEBUG http-nio-8089-exec-7 druid.sql.Statement - {conn-10018, pstmt-20061} executed. 48.6286 millis. select * from `question`
DEBUG http-nio-8089-exec-7 druid.sql.ResultSet - {conn-10018, pstmt-20061, rs-50056} open
DEBUG http-nio-8089-exec-7 druid.sql.ResultSet - {conn-10018, pstmt-20061, rs-50056} Header: [num, title, level, thumb, example, name, tag, func]
DEBUG http-nio-8089-exec-7 druid.sql.ResultSet - {conn-10018, pstmt-20061, rs-50056} Result: [0, 翻转整数, 易, 0, 21, reverseNum, Stack&Queue, int reverseNum(int num)]
DEBUG http-nio-8089-exec-7 druid.sql.ResultSet - {conn-10018, pstmt-20061, rs-50056} Result: [1, 有效的括号, 易, 0, 17, validBrackets, Stack&Queue, boolean validBrackets(String brackets)]
DEBUG http-nio-8089-exec-7 druid.sql.ResultSet - {conn-10018, pstmt-20061, rs-50056} Result: [2, 简化路径, 中, 0, 12, simplifyPath, Stack&Queue, String simplifyPath(String path)]
DEBUG http-nio-8089-exec-7 druid.sql.ResultSet - {conn-10018, pstmt-20061, rs-50056} Result: [3, 链表的头插法, 易, 0, 21, insertByHead, List, Node insertByHead(int[] nums)]
DEBUG http-nio-8089-exec-7 druid.sql.ResultSet - {conn-10018, pstmt-20061, rs-50056} Result: [4, 链表的尾插法, 易, 0, 21, insertByTail, List, Node insertByTail(int[] nums)]
DEBUG http-nio-8089-exec-7 druid.sql.ResultSet - {conn-10018, pstmt-20061, rs-50056} Result: [5, 删除链表的倒数第N个节点, 中, 0, 21, removeNthFromEnd, List, Node removeNthFromEnd(Node head, int n)]
DEBUG http-nio-8089-exec-7 druid.sql.ResultSet - {conn-10018, pstmt-20061, rs-50056} Result: [6, 最长的公共前缀, 易, 0, 17, longestCommonPrefix, String&Arr, String longestCommonPrefix(String[] strs)]
DEBUG http-nio-8089-exec-7 druid.sql.ResultSet - {conn-10018, pstmt-20061, rs-50056} closed
DEBUG http-nio-8089-exec-7 druid.sql.Statement - {conn-10018, pstmt-20061} closed
DEBUG http-nio-8089-exec-7 druid.sql.Connection - {conn-10018} pool-recycle
DEBUG http-nio-8089-exec-9 druid.sql.Connection - {conn-10018} pool-connect
DEBUG http-nio-8089-exec-9 druid.sql.Statement - {conn-10018, pstmt-20062} created. select * from `question` where tag=?
DEBUG http-nio-8089-exec-9 druid.sql.Statement - {conn-10018, pstmt-20062} Parameters : [Stack&Queue]
DEBUG http-nio-8089-exec-9 druid.sql.Statement - {conn-10018, pstmt-20062} Types : [VARCHAR]
DEBUG http-nio-8089-exec-9 druid.sql.Statement - {conn-10018, pstmt-20062} executed. 42.2627 millis. select * from `question` where tag=?
DEBUG http-nio-8089-exec-9 druid.sql.ResultSet - {conn-10018, pstmt-20062, rs-50057} open
DEBUG http-nio-8089-exec-9 druid.sql.ResultSet - {conn-10018, pstmt-20062, rs-50057} Header: [num, title, level, thumb, example, name, tag, func]
DEBUG http-nio-8089-exec-9 druid.sql.ResultSet - {conn-10018, pstmt-20062, rs-50057} Result: [0, 翻转整数, 易, 0, 21, reverseNum, Stack&Queue, int reverseNum(int num)]
DEBUG http-nio-8089-exec-9 druid.sql.ResultSet - {conn-10018, pstmt-20062, rs-50057} Result: [1, 有效的括号, 易, 0, 17, validBrackets, Stack&Queue, boolean validBrackets(String brackets)]
DEBUG http-nio-8089-exec-9 druid.sql.ResultSet - {conn-10018, pstmt-20062, rs-50057} Result: [2, 简化路径, 中, 0, 12, simplifyPath, Stack&Queue, String simplifyPath(String path)]
DEBUG http-nio-8089-exec-9 druid.sql.ResultSet - {conn-10018, pstmt-20062, rs-50057} closed
DEBUG http-nio-8089-exec-9 druid.sql.Statement - {conn-10018, pstmt-20062} closed
DEBUG http-nio-8089-exec-9 druid.sql.Connection - {conn-10018} pool-recycle
DEBUG http-nio-8089-exec-10 druid.sql.Connection - {conn-10018} pool-connect
DEBUG http-nio-8089-exec-10 druid.sql.Statement - {conn-10018, pstmt-20063} created. select * from `question` where tag=?
DEBUG http-nio-8089-exec-10 druid.sql.Statement - {conn-10018, pstmt-20063} Parameters : [List]
DEBUG http-nio-8089-exec-10 druid.sql.Statement - {conn-10018, pstmt-20063} Types : [VARCHAR]
DEBUG http-nio-8089-exec-10 druid.sql.Statement - {conn-10018, pstmt-20063} executed. 43.5361 millis. select * from `question` where tag=?
DEBUG http-nio-8089-exec-10 druid.sql.ResultSet - {conn-10018, pstmt-20063, rs-50058} open
DEBUG http-nio-8089-exec-10 druid.sql.ResultSet - {conn-10018, pstmt-20063, rs-50058} Header: [num, title, level, thumb, example, name, tag, func]
DEBUG http-nio-8089-exec-10 druid.sql.ResultSet - {conn-10018, pstmt-20063, rs-50058} Result: [3, 链表的头插法, 易, 0, 21, insertByHead, List, Node insertByHead(int[] nums)]
DEBUG http-nio-8089-exec-10 druid.sql.ResultSet - {conn-10018, pstmt-20063, rs-50058} Result: [4, 链表的尾插法, 易, 0, 21, insertByTail, List, Node insertByTail(int[] nums)]
DEBUG http-nio-8089-exec-10 druid.sql.ResultSet - {conn-10018, pstmt-20063, rs-50058} Result: [5, 删除链表的倒数第N个节点, 中, 0, 21, removeNthFromEnd, List, Node removeNthFromEnd(Node head, int n)]
DEBUG http-nio-8089-exec-10 druid.sql.ResultSet - {conn-10018, pstmt-20063, rs-50058} closed
DEBUG http-nio-8089-exec-10 druid.sql.Statement - {conn-10018, pstmt-20063} closed
DEBUG http-nio-8089-exec-10 druid.sql.Connection - {conn-10018} pool-recycle
DEBUG http-nio-8089-exec-1 druid.sql.Connection - {conn-10018} pool-connect
DEBUG http-nio-8089-exec-1 druid.sql.Statement - {conn-10018, pstmt-20064} created. select * from `question` where tag=?
DEBUG http-nio-8089-exec-1 druid.sql.Statement - {conn-10018, pstmt-20064} Parameters : [String&Arr]
DEBUG http-nio-8089-exec-1 druid.sql.Statement - {conn-10018, pstmt-20064} Types : [VARCHAR]
DEBUG http-nio-8089-exec-1 druid.sql.Statement - {conn-10018, pstmt-20064} executed. 41.7136 millis. select * from `question` where tag=?
DEBUG http-nio-8089-exec-1 druid.sql.ResultSet - {conn-10018, pstmt-20064, rs-50059} open
DEBUG http-nio-8089-exec-1 druid.sql.ResultSet - {conn-10018, pstmt-20064, rs-50059} Header: [num, title, level, thumb, example, name, tag, func]
DEBUG http-nio-8089-exec-1 druid.sql.ResultSet - {conn-10018, pstmt-20064, rs-50059} Result: [6, 最长的公共前缀, 易, 0, 17, longestCommonPrefix, String&Arr, String longestCommonPrefix(String[] strs)]
DEBUG http-nio-8089-exec-1 druid.sql.ResultSet - {conn-10018, pstmt-20064, rs-50059} closed
DEBUG http-nio-8089-exec-1 druid.sql.Statement - {conn-10018, pstmt-20064} closed
DEBUG http-nio-8089-exec-1 druid.sql.Connection - {conn-10018} pool-recycle
DEBUG http-nio-8089-exec-6 druid.sql.Connection - {conn-10018} pool-connect
DEBUG http-nio-8089-exec-6 druid.sql.Statement - {conn-10018, pstmt-20065} created. select * from `detail` where `num`=?
DEBUG http-nio-8089-exec-6 druid.sql.Statement - {conn-10018, pstmt-20065} Parameters : [6]
DEBUG http-nio-8089-exec-6 druid.sql.Statement - {conn-10018, pstmt-20065} Types : [INTEGER]
DEBUG http-nio-8089-exec-6 druid.sql.Statement - {conn-10018, pstmt-20065} executed. 42.0179 millis. select * from `detail` where `num`=?
DEBUG http-nio-8089-exec-6 druid.sql.ResultSet - {conn-10018, pstmt-20065, rs-50060} open
DEBUG http-nio-8089-exec-6 druid.sql.ResultSet - {conn-10018, pstmt-20065, rs-50060} Header: [num, title, desc, memory_limit, time_limit, example_input, example_output, tips, customized]
DEBUG http-nio-8089-exec-6 druid.sql.ResultSet - {conn-10018, pstmt-20065, rs-50060} Result: [6, 最长公共前缀, 给你一个字符串数组，请你找出他们最长的公共前缀并以字符串形式返回, 0, 3, [inborn,incorporate,indoor,inflame], in, 当不存在公共前缀时，返回空字符串""，而不是null, 0]
DEBUG http-nio-8089-exec-6 druid.sql.ResultSet - {conn-10018, pstmt-20065, rs-50060} closed
DEBUG http-nio-8089-exec-6 druid.sql.Statement - {conn-10018, pstmt-20065} closed
DEBUG http-nio-8089-exec-6 druid.sql.Connection - {conn-10018} pool-recycle
DEBUG http-nio-8089-exec-3 druid.sql.Connection - {conn-10018} pool-connect
DEBUG http-nio-8089-exec-3 druid.sql.Statement - {conn-10018, pstmt-20066} created. select * from `question` where num=?
DEBUG http-nio-8089-exec-3 druid.sql.Statement - {conn-10018, pstmt-20066} Parameters : [6]
DEBUG http-nio-8089-exec-3 druid.sql.Statement - {conn-10018, pstmt-20066} Types : [INTEGER]
DEBUG http-nio-8089-exec-3 druid.sql.Statement - {conn-10018, pstmt-20066} executed. 42.7808 millis. select * from `question` where num=?
DEBUG http-nio-8089-exec-3 druid.sql.ResultSet - {conn-10018, pstmt-20066, rs-50061} open
DEBUG http-nio-8089-exec-3 druid.sql.ResultSet - {conn-10018, pstmt-20066, rs-50061} Header: [num, title, level, thumb, example, name, tag, func]
DEBUG http-nio-8089-exec-3 druid.sql.ResultSet - {conn-10018, pstmt-20066, rs-50061} Result: [6, 最长的公共前缀, 易, 0, 17, longestCommonPrefix, String&Arr, String longestCommonPrefix(String[] strs)]
DEBUG http-nio-8089-exec-3 druid.sql.ResultSet - {conn-10018, pstmt-20066, rs-50061} closed
DEBUG http-nio-8089-exec-3 druid.sql.Statement - {conn-10018, pstmt-20066} closed
DEBUG http-nio-8089-exec-3 druid.sql.Connection - {conn-10018} pool-recycle
DEBUG Druid-ConnectionPool-Create-1400363167 druid.sql.Connection - {conn-10019,procId-314} connected
DEBUG http-nio-8089-exec-2 druid.sql.Connection - {conn-10019} closed
DEBUG http-nio-8089-exec-2 druid.sql.Connection - {conn-10018} closed
DEBUG Druid-ConnectionPool-Create-1400363167 druid.sql.Connection - {conn-10020,procId-315} connected
DEBUG http-nio-8089-exec-2 druid.sql.Connection - {conn-10020} pool-connect
DEBUG http-nio-8089-exec-2 druid.sql.Statement - {conn-10020, pstmt-20067} created. select * from `info` where `account`=?
DEBUG http-nio-8089-exec-2 druid.sql.Statement - {conn-10020, pstmt-20067} Parameters : [1543625674@qq.com]
DEBUG http-nio-8089-exec-2 druid.sql.Statement - {conn-10020, pstmt-20067} Types : [VARCHAR]
DEBUG http-nio-8089-exec-2 druid.sql.Statement - {conn-10020, pstmt-20067} executed. 43.9681 millis. select * from `info` where `account`=?
DEBUG http-nio-8089-exec-2 druid.sql.ResultSet - {conn-10020, pstmt-20067, rs-50062} open
DEBUG http-nio-8089-exec-2 druid.sql.ResultSet - {conn-10020, pstmt-20067, rs-50062} Header: [account, name, finished, simple_finished, middle_finished, hard_finished, finished_index, register_time, grade, skillful_lang, java_finished, c_finished, python_finished]
DEBUG http-nio-8089-exec-2 druid.sql.ResultSet - {conn-10020, pstmt-20067, rs-50062} Result: [1543625674@qq.com, NorthBoat, 2, 0, 0, 0, 101, 2022-04-05 06:05:05.0, null, Java, 2, 0, 0]
DEBUG http-nio-8089-exec-2 druid.sql.ResultSet - {conn-10020, pstmt-20067, rs-50062} closed
DEBUG http-nio-8089-exec-2 druid.sql.Statement - {conn-10020, pstmt-20067} closed
DEBUG http-nio-8089-exec-2 druid.sql.Connection - {conn-10020} pool-recycle
DEBUG http-nio-8089-exec-2 druid.sql.Connection - {conn-10020} pool-connect
DEBUG http-nio-8089-exec-2 druid.sql.Statement - {conn-10020, pstmt-20068} created. update `info` set finished=?, java_finished=?, c_finished=?, python_finished=?, finished_index=?, skillful_lang=? where `account`=?
DEBUG http-nio-8089-exec-2 druid.sql.Statement - {conn-10020, pstmt-20068} Parameters : [2, 2, 0, 0, 101, Java, 1543625674@qq.com]
DEBUG http-nio-8089-exec-2 druid.sql.Statement - {conn-10020, pstmt-20068} Types : [INTEGER, INTEGER, INTEGER, INTEGER, VARCHAR, VARCHAR, VARCHAR]
DEBUG http-nio-8089-exec-2 druid.sql.Statement - {conn-10020, pstmt-20068} executed. 85.1546 millis. update `info` set finished=?, java_finished=?, c_finished=?, python_finished=?, finished_index=?, skillful_lang=? where `account`=?
DEBUG http-nio-8089-exec-2 druid.sql.Statement - {conn-10020, pstmt-20068} closed
DEBUG http-nio-8089-exec-2 druid.sql.Connection - {conn-10020} pool-recycle
DEBUG http-nio-8089-exec-4 druid.sql.Connection - {conn-10020} pool-connect
DEBUG http-nio-8089-exec-4 druid.sql.Statement - {conn-10020, pstmt-20069} created. select * from `result` where `account` = ? and `num` = ?
DEBUG http-nio-8089-exec-4 druid.sql.Statement - {conn-10020, pstmt-20069} Parameters : [1543625674@qq.com, 6]
DEBUG http-nio-8089-exec-4 druid.sql.Statement - {conn-10020, pstmt-20069} Types : [VARCHAR, INTEGER]
DEBUG http-nio-8089-exec-4 druid.sql.Statement - {conn-10020, pstmt-20069} executed. 46.7354 millis. select * from `result` where `account` = ? and `num` = ?
DEBUG http-nio-8089-exec-4 druid.sql.ResultSet - {conn-10020, pstmt-20069, rs-50063} open
DEBUG http-nio-8089-exec-4 druid.sql.ResultSet - {conn-10020, pstmt-20069, rs-50063} Header: [account, num, title, key1, key2, key3, key4, val1, val2, val3, val4, code]
DEBUG http-nio-8089-exec-4 druid.sql.ResultSet - {conn-10020, pstmt-20069, rs-50063} closed
DEBUG http-nio-8089-exec-4 druid.sql.Statement - {conn-10020, pstmt-20069} closed
DEBUG http-nio-8089-exec-4 druid.sql.Connection - {conn-10020} pool-recycle
DEBUG http-nio-8089-exec-4 druid.sql.Connection - {conn-10020} pool-connect
DEBUG http-nio-8089-exec-4 druid.sql.Statement - {conn-10020, pstmt-20070} created. insert into `result`(`account`, `num`, `title`, `key1`, `key2`, `key3`, `key4`, `val1`, `val2`, `val3`, `val4`, `code`) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
DEBUG http-nio-8089-exec-4 druid.sql.Statement - {conn-10020, pstmt-20070} Parameters : [1543625674@qq.com, 6, 编译失败 QAQ, 通过样例:, 错误信息:, 容器创建时间:, 容器销毁时间:, 0, 28: error: class, interface, or enum expected
}
^
1 error
, 1432, 915ms, class Solution{<br>&nbsp;&nbsp;&nbsp;&nbsp;public String longestCommonPrefix(String[] strs){<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (strs == null || strs.length == 0) {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return "";<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;String prefix = strs[0];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int count = strs.length;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;]
DEBUG http-nio-8089-exec-4 druid.sql.Statement - {conn-10020, pstmt-20070} Types : [VARCHAR, INTEGER, VARCHAR, VARCHAR, VARCHAR, VARCHAR, VARCHAR, VARCHAR, VARCHAR, VARCHAR, VARCHAR, VARCHAR]
DEBUG http-nio-8089-exec-4 druid.sql.Statement - {conn-10020, pstmt-20070} executed. 83.3329 millis. insert into `result`(`account`, `num`, `title`, `key1`, `key2`, `key3`, `key4`, `val1`, `val2`, `val3`, `val4`, `code`) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
DEBUG http-nio-8089-exec-4 druid.sql.Statement - {conn-10020, pstmt-20070} closed
DEBUG http-nio-8089-exec-4 druid.sql.Connection - {conn-10020} pool-recycle
DEBUG http-nio-8089-exec-5 druid.sql.Connection - {conn-10020} pool-connect
DEBUG http-nio-8089-exec-5 druid.sql.Statement - {conn-10020, pstmt-20071} created. select * from `info` where `account`=?
DEBUG http-nio-8089-exec-5 druid.sql.Statement - {conn-10020, pstmt-20071} Parameters : [1543625674@qq.com]
DEBUG http-nio-8089-exec-5 druid.sql.Statement - {conn-10020, pstmt-20071} Types : [VARCHAR]
DEBUG http-nio-8089-exec-5 druid.sql.Statement - {conn-10020, pstmt-20071} executed. 80.4667 millis. select * from `info` where `account`=?
DEBUG http-nio-8089-exec-5 druid.sql.ResultSet - {conn-10020, pstmt-20071, rs-50064} open
DEBUG http-nio-8089-exec-5 druid.sql.ResultSet - {conn-10020, pstmt-20071, rs-50064} Header: [account, name, finished, simple_finished, middle_finished, hard_finished, finished_index, register_time, grade, skillful_lang, java_finished, c_finished, python_finished]
DEBUG http-nio-8089-exec-5 druid.sql.ResultSet - {conn-10020, pstmt-20071, rs-50064} Result: [1543625674@qq.com, NorthBoat, 2, 0, 0, 0, 101, 2022-04-05 06:05:05.0, null, Java, 2, 0, 0]
DEBUG http-nio-8089-exec-5 druid.sql.ResultSet - {conn-10020, pstmt-20071, rs-50064} closed
DEBUG http-nio-8089-exec-5 druid.sql.Statement - {conn-10020, pstmt-20071} closed
DEBUG http-nio-8089-exec-5 druid.sql.Connection - {conn-10020} pool-recycle
DEBUG http-nio-8089-exec-5 druid.sql.Connection - {conn-10020} pool-connect
DEBUG http-nio-8089-exec-5 druid.sql.Statement - {conn-10020, pstmt-20072} created. update `info` set finished=?, java_finished=?, c_finished=?, python_finished=?, finished_index=?, skillful_lang=? where `account`=?
DEBUG http-nio-8089-exec-5 druid.sql.Statement - {conn-10020, pstmt-20072} Parameters : [3, 3, 0, 0, 1010001, Java, 1543625674@qq.com]
DEBUG http-nio-8089-exec-5 druid.sql.Statement - {conn-10020, pstmt-20072} Types : [INTEGER, INTEGER, INTEGER, INTEGER, VARCHAR, VARCHAR, VARCHAR]
DEBUG http-nio-8089-exec-5 druid.sql.Statement - {conn-10020, pstmt-20072} executed. 89.7587 millis. update `info` set finished=?, java_finished=?, c_finished=?, python_finished=?, finished_index=?, skillful_lang=? where `account`=?
DEBUG http-nio-8089-exec-5 druid.sql.Statement - {conn-10020, pstmt-20072} closed
DEBUG http-nio-8089-exec-5 druid.sql.Connection - {conn-10020} pool-recycle
DEBUG http-nio-8089-exec-7 druid.sql.Connection - {conn-10020} pool-connect
DEBUG http-nio-8089-exec-7 druid.sql.Statement - {conn-10020, pstmt-20073} created. select * from `question` where num=?
DEBUG http-nio-8089-exec-7 druid.sql.Statement - {conn-10020, pstmt-20073} Parameters : [6]
DEBUG http-nio-8089-exec-7 druid.sql.Statement - {conn-10020, pstmt-20073} Types : [INTEGER]
DEBUG http-nio-8089-exec-7 druid.sql.Statement - {conn-10020, pstmt-20073} executed. 47.0205 millis. select * from `question` where num=?
DEBUG http-nio-8089-exec-7 druid.sql.ResultSet - {conn-10020, pstmt-20073, rs-50065} open
DEBUG http-nio-8089-exec-7 druid.sql.ResultSet - {conn-10020, pstmt-20073, rs-50065} Header: [num, title, level, thumb, example, name, tag, func]
DEBUG http-nio-8089-exec-7 druid.sql.ResultSet - {conn-10020, pstmt-20073, rs-50065} Result: [6, 最长的公共前缀, 易, 0, 17, longestCommonPrefix, String&Arr, String longestCommonPrefix(String[] strs)]
DEBUG http-nio-8089-exec-7 druid.sql.ResultSet - {conn-10020, pstmt-20073, rs-50065} closed
DEBUG http-nio-8089-exec-7 druid.sql.Statement - {conn-10020, pstmt-20073} closed
DEBUG http-nio-8089-exec-7 druid.sql.Connection - {conn-10020} pool-recycle
DEBUG http-nio-8089-exec-8 druid.sql.Connection - {conn-10020} pool-connect
DEBUG http-nio-8089-exec-8 druid.sql.Statement - {conn-10020, pstmt-20074} created. select * from `result` where `account` = ? and `num` = ?
DEBUG http-nio-8089-exec-8 druid.sql.Statement - {conn-10020, pstmt-20074} Parameters : [1543625674@qq.com, 6]
DEBUG http-nio-8089-exec-8 druid.sql.Statement - {conn-10020, pstmt-20074} Types : [VARCHAR, INTEGER]
DEBUG http-nio-8089-exec-8 druid.sql.Statement - {conn-10020, pstmt-20074} executed. 44.338 millis. select * from `result` where `account` = ? and `num` = ?
DEBUG http-nio-8089-exec-8 druid.sql.ResultSet - {conn-10020, pstmt-20074, rs-50066} open
DEBUG http-nio-8089-exec-8 druid.sql.ResultSet - {conn-10020, pstmt-20074, rs-50066} Header: [account, num, title, key1, key2, key3, key4, val1, val2, val3, val4, code]
DEBUG http-nio-8089-exec-8 druid.sql.ResultSet - {conn-10020, pstmt-20074, rs-50066} Result: [1543625674@qq.com, 6, 编译失败 QAQ, 通过样例:, 错误信息:, 容器创建时间:, 容器销毁时间:, 0, 28: error: class, interface, or enum expected
}
^
1 error
, 1432, 915ms, class Solution{<br>&nbsp;&nbsp;&nbsp;&nbsp;public String longestCommonPrefix(String[] strs){<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (strs == null || strs.length == 0) {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return "";<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;String prefix = strs[0];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int count = strs.length;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;]
DEBUG http-nio-8089-exec-8 druid.sql.ResultSet - {conn-10020, pstmt-20074, rs-50066} closed
DEBUG http-nio-8089-exec-8 druid.sql.Statement - {conn-10020, pstmt-20074} closed
DEBUG http-nio-8089-exec-8 druid.sql.Connection - {conn-10020} pool-recycle
DEBUG http-nio-8089-exec-8 druid.sql.Connection - {conn-10020} pool-connect
DEBUG http-nio-8089-exec-8 druid.sql.Statement - {conn-10020, pstmt-20075} created. update `result` set `title`=?, `key1`=?, `key2`=?, `key3`=?, `key4`=?, `val1`=?, `val2`=?, `val3`=?, `val4`=?, `code`=? where `account`=? and `num`=?
DEBUG http-nio-8089-exec-8 druid.sql.Statement - {conn-10020, pstmt-20075} Parameters : [成功通过 OwO, 通过样例:, 平均用时:, 内存使用:, 创建容器时间:, 17, 0ms, 0MiB, 877, class Solution{<br>&nbsp;&nbsp;&nbsp;&nbsp;public String longestCommonPrefix(String[] strs){<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (strs == null || strs.length == 0) {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return "";<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;String prefix = strs[0];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int count = strs.length;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;, 1543625674@qq.com, 6]
DEBUG http-nio-8089-exec-8 druid.sql.Statement - {conn-10020, pstmt-20075} Types : [VARCHAR, VARCHAR, VARCHAR, VARCHAR, VARCHAR, VARCHAR, VARCHAR, VARCHAR, VARCHAR, VARCHAR, VARCHAR, INTEGER]
DEBUG http-nio-8089-exec-8 druid.sql.Statement - {conn-10020, pstmt-20075} executed. 90.1755 millis. update `result` set `title`=?, `key1`=?, `key2`=?, `key3`=?, `key4`=?, `val1`=?, `val2`=?, `val3`=?, `val4`=?, `code`=? where `account`=? and `num`=?
DEBUG http-nio-8089-exec-8 druid.sql.Statement - {conn-10020, pstmt-20075} closed
DEBUG http-nio-8089-exec-8 druid.sql.Connection - {conn-10020} pool-recycle
DEBUG Druid-ConnectionPool-Create-1400363167 druid.sql.Connection - {conn-10021,procId-316} connected
DEBUG http-nio-8089-exec-9 druid.sql.Connection - {conn-10021} pool-connect
DEBUG http-nio-8089-exec-9 druid.sql.Statement - {conn-10021, pstmt-20076} created. select * from `detail` where `num`=?
DEBUG http-nio-8089-exec-9 druid.sql.Statement - {conn-10021, pstmt-20076} Parameters : [6]
DEBUG http-nio-8089-exec-9 druid.sql.Statement - {conn-10021, pstmt-20076} Types : [INTEGER]
DEBUG http-nio-8089-exec-9 druid.sql.Statement - {conn-10021, pstmt-20076} executed. 48.7132 millis. select * from `detail` where `num`=?
DEBUG http-nio-8089-exec-9 druid.sql.ResultSet - {conn-10021, pstmt-20076, rs-50067} open
DEBUG http-nio-8089-exec-9 druid.sql.ResultSet - {conn-10021, pstmt-20076, rs-50067} Header: [num, title, desc, memory_limit, time_limit, example_input, example_output, tips, customized]
DEBUG http-nio-8089-exec-9 druid.sql.ResultSet - {conn-10021, pstmt-20076, rs-50067} Result: [6, 最长公共前缀, 给你一个字符串数组，请你找出他们最长的公共前缀并以字符串形式返回, 0, 3, [inborn,incorporate,indoor,inflame], in, 当不存在公共前缀时，返回空字符串""，而不是null, 0]
DEBUG http-nio-8089-exec-9 druid.sql.ResultSet - {conn-10021, pstmt-20076, rs-50067} closed
DEBUG http-nio-8089-exec-9 druid.sql.Statement - {conn-10021, pstmt-20076} closed
DEBUG http-nio-8089-exec-9 druid.sql.Connection - {conn-10021} pool-recycle
DEBUG http-nio-8089-exec-10 druid.sql.Connection - {conn-10021} pool-connect
DEBUG http-nio-8089-exec-10 druid.sql.Statement - {conn-10021, pstmt-20077} created. select * from `question`
DEBUG http-nio-8089-exec-10 druid.sql.Statement - {conn-10021, pstmt-20077} Parameters : []
DEBUG http-nio-8089-exec-10 druid.sql.Statement - {conn-10021, pstmt-20077} Types : []
DEBUG http-nio-8089-exec-10 druid.sql.Statement - {conn-10021, pstmt-20077} executed. 41.6733 millis. select * from `question`
DEBUG http-nio-8089-exec-10 druid.sql.ResultSet - {conn-10021, pstmt-20077, rs-50068} open
DEBUG http-nio-8089-exec-10 druid.sql.ResultSet - {conn-10021, pstmt-20077, rs-50068} Header: [num, title, level, thumb, example, name, tag, func]
DEBUG http-nio-8089-exec-10 druid.sql.ResultSet - {conn-10021, pstmt-20077, rs-50068} Result: [0, 翻转整数, 易, 0, 21, reverseNum, Stack&Queue, int reverseNum(int num)]
DEBUG http-nio-8089-exec-10 druid.sql.ResultSet - {conn-10021, pstmt-20077, rs-50068} Result: [1, 有效的括号, 易, 0, 17, validBrackets, Stack&Queue, boolean validBrackets(String brackets)]
DEBUG http-nio-8089-exec-10 druid.sql.ResultSet - {conn-10021, pstmt-20077, rs-50068} Result: [2, 简化路径, 中, 0, 12, simplifyPath, Stack&Queue, String simplifyPath(String path)]
DEBUG http-nio-8089-exec-10 druid.sql.ResultSet - {conn-10021, pstmt-20077, rs-50068} Result: [3, 链表的头插法, 易, 0, 21, insertByHead, List, Node insertByHead(int[] nums)]
DEBUG http-nio-8089-exec-10 druid.sql.ResultSet - {conn-10021, pstmt-20077, rs-50068} Result: [4, 链表的尾插法, 易, 0, 21, insertByTail, List, Node insertByTail(int[] nums)]
DEBUG http-nio-8089-exec-10 druid.sql.ResultSet - {conn-10021, pstmt-20077, rs-50068} Result: [5, 删除链表的倒数第N个节点, 中, 0, 21, removeNthFromEnd, List, Node removeNthFromEnd(Node head, int n)]
DEBUG http-nio-8089-exec-10 druid.sql.ResultSet - {conn-10021, pstmt-20077, rs-50068} Result: [6, 最长的公共前缀, 易, 0, 17, longestCommonPrefix, String&Arr, String longestCommonPrefix(String[] strs)]
DEBUG http-nio-8089-exec-10 druid.sql.ResultSet - {conn-10021, pstmt-20077, rs-50068} closed
DEBUG http-nio-8089-exec-10 druid.sql.Statement - {conn-10021, pstmt-20077} closed
DEBUG http-nio-8089-exec-10 druid.sql.Connection - {conn-10021} pool-recycle
DEBUG Druid-ConnectionPool-Destroy-1400363167 druid.sql.Connection - {conn-10020} closed
DEBUG Druid-ConnectionPool-Destroy-1400363167 druid.sql.Connection - {conn-10021} closed
DEBUG Druid-ConnectionPool-Create-1400363167 druid.sql.Connection - {conn-10022,procId-317} connected
DEBUG http-nio-8089-exec-1 druid.sql.Connection - {conn-10022} pool-connect
DEBUG http-nio-8089-exec-1 druid.sql.Statement - {conn-10022, pstmt-20078} created. select * from `question`
DEBUG http-nio-8089-exec-1 druid.sql.Statement - {conn-10022, pstmt-20078} Parameters : []
DEBUG http-nio-8089-exec-1 druid.sql.Statement - {conn-10022, pstmt-20078} Types : []
DEBUG http-nio-8089-exec-1 druid.sql.Statement - {conn-10022, pstmt-20078} executed. 49.2005 millis. select * from `question`
DEBUG http-nio-8089-exec-1 druid.sql.ResultSet - {conn-10022, pstmt-20078, rs-50069} open
DEBUG http-nio-8089-exec-1 druid.sql.ResultSet - {conn-10022, pstmt-20078, rs-50069} Header: [num, title, level, thumb, example, name, tag, func]
DEBUG http-nio-8089-exec-1 druid.sql.ResultSet - {conn-10022, pstmt-20078, rs-50069} Result: [0, 翻转整数, 易, 0, 21, reverseNum, Stack&Queue, int reverseNum(int num)]
DEBUG http-nio-8089-exec-1 druid.sql.ResultSet - {conn-10022, pstmt-20078, rs-50069} Result: [1, 有效的括号, 易, 0, 17, validBrackets, Stack&Queue, boolean validBrackets(String brackets)]
DEBUG http-nio-8089-exec-1 druid.sql.ResultSet - {conn-10022, pstmt-20078, rs-50069} Result: [2, 简化路径, 中, 0, 12, simplifyPath, Stack&Queue, String simplifyPath(String path)]
DEBUG http-nio-8089-exec-1 druid.sql.ResultSet - {conn-10022, pstmt-20078, rs-50069} Result: [3, 链表的头插法, 易, 0, 21, insertByHead, List, Node insertByHead(int[] nums)]
DEBUG http-nio-8089-exec-1 druid.sql.ResultSet - {conn-10022, pstmt-20078, rs-50069} Result: [4, 链表的尾插法, 易, 0, 21, insertByTail, List, Node insertByTail(int[] nums)]
DEBUG http-nio-8089-exec-1 druid.sql.ResultSet - {conn-10022, pstmt-20078, rs-50069} Result: [5, 删除链表的倒数第N个节点, 中, 0, 21, removeNthFromEnd, List, Node removeNthFromEnd(Node head, int n)]
DEBUG http-nio-8089-exec-1 druid.sql.ResultSet - {conn-10022, pstmt-20078, rs-50069} Result: [6, 最长的公共前缀, 易, 0, 17, longestCommonPrefix, String&Arr, String longestCommonPrefix(String[] strs)]
DEBUG http-nio-8089-exec-1 druid.sql.ResultSet - {conn-10022, pstmt-20078, rs-50069} Result: [7, 字符串转整数, 中, 0, 21, strToNum, String&Arr, int strToNum(String str)]
DEBUG http-nio-8089-exec-1 druid.sql.ResultSet - {conn-10022, pstmt-20078, rs-50069} closed
DEBUG http-nio-8089-exec-1 druid.sql.Statement - {conn-10022, pstmt-20078} closed
DEBUG http-nio-8089-exec-1 druid.sql.Connection - {conn-10022} pool-recycle
DEBUG http-nio-8089-exec-6 druid.sql.Connection - {conn-10022} pool-connect
DEBUG http-nio-8089-exec-6 druid.sql.Statement - {conn-10022, pstmt-20079} created. select * from `question` where tag=?
DEBUG http-nio-8089-exec-6 druid.sql.Statement - {conn-10022, pstmt-20079} Parameters : [String&Arr]
DEBUG http-nio-8089-exec-6 druid.sql.Statement - {conn-10022, pstmt-20079} Types : [VARCHAR]
DEBUG http-nio-8089-exec-6 druid.sql.Statement - {conn-10022, pstmt-20079} executed. 41.8138 millis. select * from `question` where tag=?
DEBUG http-nio-8089-exec-6 druid.sql.ResultSet - {conn-10022, pstmt-20079, rs-50070} open
DEBUG http-nio-8089-exec-6 druid.sql.ResultSet - {conn-10022, pstmt-20079, rs-50070} Header: [num, title, level, thumb, example, name, tag, func]
DEBUG http-nio-8089-exec-6 druid.sql.ResultSet - {conn-10022, pstmt-20079, rs-50070} Result: [6, 最长的公共前缀, 易, 0, 17, longestCommonPrefix, String&Arr, String longestCommonPrefix(String[] strs)]
DEBUG http-nio-8089-exec-6 druid.sql.ResultSet - {conn-10022, pstmt-20079, rs-50070} Result: [7, 字符串转整数, 中, 0, 21, strToNum, String&Arr, int strToNum(String str)]
DEBUG http-nio-8089-exec-6 druid.sql.ResultSet - {conn-10022, pstmt-20079, rs-50070} closed
DEBUG http-nio-8089-exec-6 druid.sql.Statement - {conn-10022, pstmt-20079} closed
DEBUG http-nio-8089-exec-6 druid.sql.Connection - {conn-10022} pool-recycle
DEBUG http-nio-8089-exec-3 druid.sql.Connection - {conn-10022} pool-connect
DEBUG http-nio-8089-exec-3 druid.sql.Statement - {conn-10022, pstmt-20080} created. select * from `detail` where `num`=?
DEBUG http-nio-8089-exec-3 druid.sql.Statement - {conn-10022, pstmt-20080} Parameters : [7]
DEBUG http-nio-8089-exec-3 druid.sql.Statement - {conn-10022, pstmt-20080} Types : [INTEGER]
DEBUG http-nio-8089-exec-3 druid.sql.Statement - {conn-10022, pstmt-20080} executed. 48.2337 millis. select * from `detail` where `num`=?
DEBUG http-nio-8089-exec-3 druid.sql.ResultSet - {conn-10022, pstmt-20080, rs-50071} open
DEBUG http-nio-8089-exec-3 druid.sql.ResultSet - {conn-10022, pstmt-20080, rs-50071} Header: [num, title, desc, memory_limit, time_limit, example_input, example_output, tips, customized]
DEBUG http-nio-8089-exec-3 druid.sql.ResultSet - {conn-10022, pstmt-20080, rs-50071} Result: [7, 字符串转整数, 给你一个不规则的字符串，请你将他转成整数并返回，规则如下：去掉无效空格，可识别+、-号，无符号默认为正数，当字符串中存在非数字时，从非数字部分开始属于无效部分，直接丢弃即可, 0, 4, -627813 wdnmd, -627813, 可以用有限自动机来解，也可以是纯粹的参数校验问题, 0]
DEBUG http-nio-8089-exec-3 druid.sql.ResultSet - {conn-10022, pstmt-20080, rs-50071} closed
DEBUG http-nio-8089-exec-3 druid.sql.Statement - {conn-10022, pstmt-20080} closed
DEBUG http-nio-8089-exec-3 druid.sql.Connection - {conn-10022} pool-recycle
DEBUG http-nio-8089-exec-2 druid.sql.Connection - {conn-10022} pool-connect
DEBUG http-nio-8089-exec-2 druid.sql.Statement - {conn-10022, pstmt-20081} created. select * from `question` where num=?
DEBUG http-nio-8089-exec-2 druid.sql.Statement - {conn-10022, pstmt-20081} Parameters : [7]
DEBUG http-nio-8089-exec-2 druid.sql.Statement - {conn-10022, pstmt-20081} Types : [INTEGER]
DEBUG http-nio-8089-exec-2 druid.sql.Statement - {conn-10022, pstmt-20081} executed. 42.625 millis. select * from `question` where num=?
DEBUG http-nio-8089-exec-2 druid.sql.ResultSet - {conn-10022, pstmt-20081, rs-50072} open
DEBUG http-nio-8089-exec-2 druid.sql.ResultSet - {conn-10022, pstmt-20081, rs-50072} Header: [num, title, level, thumb, example, name, tag, func]
DEBUG http-nio-8089-exec-2 druid.sql.ResultSet - {conn-10022, pstmt-20081, rs-50072} Result: [7, 字符串转整数, 中, 0, 21, strToNum, String&Arr, int strToNum(String str)]
DEBUG http-nio-8089-exec-2 druid.sql.ResultSet - {conn-10022, pstmt-20081, rs-50072} closed
DEBUG http-nio-8089-exec-2 druid.sql.Statement - {conn-10022, pstmt-20081} closed
DEBUG http-nio-8089-exec-2 druid.sql.Connection - {conn-10022} pool-recycle
DEBUG http-nio-8089-exec-4 druid.sql.Connection - {conn-10022} pool-connect
DEBUG http-nio-8089-exec-4 druid.sql.Statement - {conn-10022, pstmt-20082} created. select * from `detail` where `num`=?
DEBUG http-nio-8089-exec-4 druid.sql.Statement - {conn-10022, pstmt-20082} Parameters : [7]
DEBUG http-nio-8089-exec-4 druid.sql.Statement - {conn-10022, pstmt-20082} Types : [INTEGER]
DEBUG http-nio-8089-exec-4 druid.sql.Statement - {conn-10022, pstmt-20082} executed. 40.9989 millis. select * from `detail` where `num`=?
DEBUG http-nio-8089-exec-4 druid.sql.ResultSet - {conn-10022, pstmt-20082, rs-50073} open
DEBUG http-nio-8089-exec-4 druid.sql.ResultSet - {conn-10022, pstmt-20082, rs-50073} Header: [num, title, desc, memory_limit, time_limit, example_input, example_output, tips, customized]
